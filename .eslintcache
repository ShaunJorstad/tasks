[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"4","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"6","/Users/shaunjorstad/Desktop/tasks/src/Config.js":"7","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js":"8","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js":"9","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js":"11","/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js":"12","/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js":"13","/Users/shaunjorstad/Desktop/tasks/src/components/Task.js":"14","/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js":"15","/Users/shaunjorstad/Desktop/tasks/src/data.js":"16"},{"size":500,"mtime":1607809103543,"results":"17","hashOfConfig":"18"},{"size":5157,"mtime":1609216593422,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1607809103547,"results":"20","hashOfConfig":"18"},{"size":603,"mtime":1608939344342,"results":"21","hashOfConfig":"18"},{"size":2592,"mtime":1609216593423,"results":"22","hashOfConfig":"18"},{"size":3991,"mtime":1608939312965,"results":"23","hashOfConfig":"18"},{"size":4641,"mtime":1609216593423,"results":"24","hashOfConfig":"18"},{"size":2082,"mtime":1609216593426,"results":"25","hashOfConfig":"18"},{"size":2640,"mtime":1609216593424,"results":"26","hashOfConfig":"18"},{"size":2482,"mtime":1608921365848,"results":"27","hashOfConfig":"18"},{"size":3241,"mtime":1609216593425,"results":"28","hashOfConfig":"18"},{"size":4666,"mtime":1609216593424,"results":"29","hashOfConfig":"18"},{"size":1948,"mtime":1609216593425,"results":"30","hashOfConfig":"18"},{"size":3246,"mtime":1609216593426,"results":"31","hashOfConfig":"18"},{"size":1062,"mtime":1609125808722,"results":"32","hashOfConfig":"18"},{"size":1826,"mtime":1609200259285,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"whis6",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["74","75"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["76","77"],"/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",[],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["78","79","80","81"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { List, Task } from './DataStructures.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nlet allLists = null;\nlet today = 0;\nlet upcoming = 0;\nlet all = 0;\n\n// Lists Management\nexport function getLists() {\n    if (allLists != null) {\n        return new Promise((resolve, reject) => {\n            resolve(\n                allLists\n            );\n        });\n    }\n    return new Promise((resolve, reject) => {\n        // console.log(\"querying firebase\");\n        db.collection('lists').get().then((lists) => {\n            let tmplists = {};\n            lists.forEach((list) => {\n                tmplists[list.data().config.id] = new List(list.data());\n            });\n            tmplists.today = new List({ config: { name: 'today', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.upcoming = new List({ config: { name: 'upcoming', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.all = new List({ config: { name: 'all', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n\n            allLists = tmplists;\n            resolve(allLists);\n        }).catch(function (error) {\n            reject(\"error getting document\");\n        });\n    });\n}\n\nexport function getCounts() {\n    if (allLists != null) {\n        allLists.forEach((list) => {\n\n        });\n    }\n    return getLists().then((result) => {\n        getCounts();\n    });\n}\n\nexport function removeList(listId) {\n    db.collection('lists').doc(listId).delete()\n}\n\n/**\n * adds a new list to firestore\n * @param {*} config  {name, order, color}\n */\nexport function fcreateList(config) {\n    // create list locally \n    let listConfig = config\n    listConfig['id'] = uuidv4()\n    let newList = new List({\n        config: listConfig,\n        taskCount: 0,\n        sections: {\n            default: {\n                order: 0,\n                tasks: {}\n            },\n            second: {\n                order: 1,\n                tasks: {}\n            }\n        }\n    })\n    // create list remotely\n    // console.log(JSON.stringify(newList.toObject()))\n    console.log('pushing to firebase')\n    console.log(JSON.stringify(newList))\n    console.log(newList.toObject())\n    db.collection(\"lists\").doc(listConfig.id).set(newList.toObject())\n    return newList;\n}\n\nexport function updateListConfig(listName, config) {\n\n}\n\nexport function changeListName(newName, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.name\": newName\n    })\n}\n\nexport function changeListColor(newColor, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.color\": newColor\n    })\n}\n\n\n// Task Management\nexport function fireCreateTask(listID, sectionName, task) {\n    let newTask = {}\n    newTask[`sections.${sectionName}.tasks.${task.id}`] = task.toObject()\n    newTask[`taskCount`] = inc\n    db.collection('lists').doc(listID).update(newTask).then()\n}\n\nexport function fcompleteTask(listId, sectionName, taskId) {\n    let completeTask = {}\n    completeTask[`sections.${sectionName}.tasks.${taskId}`] = del\n    completeTask[`taskCount`] = dec\n    db.collection('lists').doc(listId).update(completeTask)\n}\n\nexport function updateTask(listId, sectionName, taskId, taskData) {\n    let taskUpdate = {}\n    for (let key in taskData) {\n        taskUpdate[`sections.${sectionName}.tasks.${taskId}.${key}`] = taskData[key]\n    }\n    console.log('attempting to push to firebase:')\n    console.log(taskUpdate)\n    db.collection('lists').doc(listId).update(taskUpdate)\n        .catch(function (error) {\n            console.error(\"Error updating document: \", error);\n        });\n}\n\nexport function testConnection() {\n    fcreateList({\n        name: 'yet another list!',\n        order: 0,\n        color: 'blue'\n    });\n}\n\n// export function createNewList() {\n//     createList({\n\n//     })\n// }","/Users/shaunjorstad/Desktop/tasks/src/Config.js",["82","83"],"import React from 'react';\n\nclass Config extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameInput: this.props.lists[this.props.selectedList].name,\n            validName: true,\n            colorInput: this.getList().color,\n            validColor: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedList != prevProps.selectedList) {\n            this.setState({\n                nameInput: this.getList().name,\n                validName: true,\n                colorInput: this.getList().color,\n                validColor: true\n            })\n        }\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    processNameChange(val) {\n        this.setState({\n            nameInput: val\n        })\n        if (val.length == 0 || ['today', 'upcoming', 'all'].includes(val)) {\n            this.setState({\n                validName: false\n            })\n        } else {\n            this.setState({\n                validName: true\n            })\n            this.props.updateListName(val, this.getList().id)\n        }\n    }\n\n    processColorChange(val) {\n        this.setState({\n            colorInput: val\n        })\n        if (!['green', 'blue', 'teal', 'pink', 'purple', 'orange'].includes(val)) {\n            this.setState({\n                validColor: false\n            })\n        } else {\n            this.setState({\n                validColor: true\n            })\n            this.props.updateListColor(val, this.getList().id)\n        }\n    }\n\n    renderColorOptions() {\n        return (\n            <div className=\"col-span-3 grid grid-cols-6 \">\n                <div className=\"h-10 w-10 rounded-lg bg-pink transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('pink') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-blue transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('blue') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-purple transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('purple') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-orange transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('orange') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-teal transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('teal') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-green transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('green') }}></div>\n            </div>\n        )\n    }\n\n\n    renderTitleInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg ${this.state.validName ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.nameInput}\n                onChange={val => { this.processNameChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderColorInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg text-${this.getList().color} ${this.state.validColor ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.colorInput}\n                onChange={val => { this.processColorChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderDeleteButton() {\n        return (\n            <div className=\"select-none cursor-pointer bg-lightRed text-red col-span-3 px-4 py-4 rounded-lg mt-48 flex justify-center\" onClick={() => { this.props.deleteList(this.getList().id) }}>\n                <p className=\"\">delete</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"mt-20 w-3/5 grid grid-cols-4 gap-y-7\">\n                <div className=\"configLabel\">\n                    <p>Title</p>\n                </div>\n                {this.renderTitleInput()}\n                <div className=\"configLabel\">\n                    <p>Color</p>\n                </div>\n                {/* {this.renderColorInput()} */}\n                {this.renderColorOptions()}\n                <div></div>\n                {this.renderDeleteButton()}\n            </div>\n        );\n    }\n}\n\nexport default Config;","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js",["84"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport Tile from './Tile.js';\nimport ListTile from './ListTile.js';\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n\n  render() {\n    let listTiles = Object.values(this.props.lists).sort((a, b) => { return a.order - b.order }).map(list =>\n      <ListTile\n        list={list}\n        lists={this.props.lists}\n        tasks={this.props.tasks}\n        selectedList={this.props.selectedList}\n        rootHandlers={this.props.rootHandlers}\n      />)\n\n    return (\n      <div className=\"bg-navBackground h-full w-372 transition-all duration-700 ease-in-out dynamicNav\">\n        <div className=\"px-2 h-full\">\n          <input className=\"w-full mt-9 py-1 bg-tileUnselected border-tileUnselectedBorder border-2 px-3 rounded-md text-sm\" type=\"text\" id=\"searchBar\" placeholder=\"search\"></input>\n          <div className=\"grid mt-5 grid-cols-2 gap-x-3 gap-y-3\">\n            {/* <Tile\n              title=\"today\"\n              icon=\"today\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"upcoming\"\n              icon=\"upcoming\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"all\"\n              icon=\"all\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} /> */}\n          </div>\n\n          <div className=\"mt-10 h-lists\">\n            {listTiles}\n          </div>\n          <div className=\"flex items-center cursor-pointer\">\n            <p\n              className=\"select-none place-self-center text-center pl-2 pt-4 newListButton text-gray\"\n              onClick={() => { this.props.rootHandlers.createList() }}\n            >+ Add List</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js",["85"],"import React from 'react';\nimport ContentHeader from './ContentHeader';\nimport Config from '../Config.js';\nimport ListAll from './ListAll.js';\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: 'all',\n      view: 'list'\n    }\n    this.updateFilter = this.updateFilter.bind(this);\n    this.updateView = this.updateView.bind(this);\n    this.contentHandlers = {\n      updateFilter: this.updateFilter,\n      updateView: this.updateView\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedList !== this.props.selectedList && ['today', 'all', 'upcoming'].includes(this.props.selectedList)) {\n      this.setState({\n        filter: 'all',\n        view: 'list'\n      })\n    }\n  }\n\n  updateFilter(newFilter) {\n    if (this.state.view === 'config') {\n      this.setState({ filter: newFilter, view: 'list' })\n    } else {\n      this.setState({ filter: newFilter });\n    }\n  }\n\n  updateView(newView) {\n    this.setState({ view: newView });\n  }\n\n  renderContents() {\n    switch (this.state.view) {\n      case \"config\":\n        return (\n          <Config\n            lists={this.props.lists}\n            tasks={this.props.tasks}\n            selectedList={this.props.selectedList}\n            rootHandlers={this.props.rootHandlers}\n          />\n        );\n      case \"list\":\n        switch (this.state.filter) {\n          case \"all\":\n            return <ListAll\n              lists={this.props.lists}\n              tasks={this.props.tasks}\n              selectedList={this.props.selectedList}\n              rootHandlers={this.props.rootHandlers}\n            />\n          case 'today':\n            return ('today')\n          case 'upcoming':\n            return ('upcoming')\n          default:\n            return 'error'\n        }\n        return ('list');\n      case \"calendar\":\n        return ('calendar')\n      default:\n        return 'error'\n    }\n  }\n\n  render() {\n    if (Object.values(this.props.lists).length === 0) {\n      return (\n        <div></div>\n      );\n    }\n\n    return (\n      <div className=\"bg-blue-200 h-full w-full\">\n        <div className=\"mx-4 w-9/10 h-full\">\n          <ContentHeader\n            lists={this.props.lists}\n            tasks={this.props.tasks}\n            selectedList={this.props.selectedList}\n            filter={this.state.filter}\n            view={this.state.view}\n            contentHandlers={this.contentHandlers}\n            rootHandlers={this.props.rootHandlers}\n          />\n          <div className=\"h-5/6\">\n            {this.renderContents()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js",["86"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from '../icons/today.svg';\nimport allLogo from '../icons/all.svg';\nimport upcomingLogo from '../icons/upcoming.svg';\nimport flaggedLogo from '../icons/flagged.svg';\nimport '../index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => { this.props.selectNewList(this.props.title) }\n                }>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js",["87","88"],"import React from 'react';\nimport Task from './Task.js';\n\nclass ListAll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: this.getList(),\n            activeTask: null\n        }\n        this.selectNewTask = this.selectNewTask.bind(this);\n        this.keyPress = this.keyPress.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedList !== this.props.selectedList) {\n            this.setState({ list: this.getList() });\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.keyPress, false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.keyPress, false);\n    }\n\n    keyPress(event) {\n        switch (event.keyCode) {\n            case 27:\n                this.selectNewTask(null)\n                break\n            default:\n                break\n        } \n    }\n\n    selectNewTask(id) {\n        this.setState({ activeTask: id })\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    render() {\n        let tasks = []\n\n        for (let taskID in this.state.list.sections.default.tasks) {\n            let tmpTask = this.state.list.sections.default.tasks[taskID]\n            tasks.push(tmpTask)\n        }\n\n        tasks = tasks.sort((a, b) => { return a.order - b.order }).map(task =>\n            <Task\n                lists={this.props.lists}\n                selectedList={this.props.selectedList}\n                id={task.id}\n                content={task.content}\n                description={task.description}\n                due={task.due}\n                task={task}\n                editTask={this.props.editTask}\n                selectNewTask={this.selectNewTask}\n                activeTask={this.state.activeTask}\n                completeTask={this.props.completeTask}\n            />\n        )\n\n        return (\n            <div className=\"w-full\">\n                {tasks}\n                {/* <Task lists={this.props.lists} selectedList={this.props.selectedList} /> */}\n            </div>\n        );\n    }\n}\n\nexport default ListAll;","/Users/shaunjorstad/Desktop/tasks/src/components/Task.js",["89"],"import React from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nclass Task extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            textBoxHeight: 'auto'\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.activeTask === prevProps.task.id && this.props.activeTask !== this.props.task.id) {\n            this.props.editTask(this.getList().id, 'default', this.props.task.id, null, true)\n        }\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    renderCheckCircle() {\n        return (\n            <div className=\"cursor-pointer\" onClick={() => {\n                this.props.completeTask(this.getList().id, 'default', this.props.task.id)\n            }}>\n                <div className=\"rounded-full w-5 h-5 border-2 border-gray mt-1\">\n                </div>\n            </div>\n        )\n    }\n\n    renderTaskContent() {\n        return (\n            <input\n                className=\"col-span-11 text-sfRegular text-14\"\n                type='text'\n                placeholder=\"task content\"\n                value={this.props.content}\n                onChange={val => { this.props.editTask(this.getList().id, 'default', this.props.task.id, { content: val.target.value }) }} />\n        )\n    }\n\n    renderNotes() {\n        return (\n            <div className={`col-span-11 `}>\n                <AnimateHeight\n                    duration={500}\n                    height={this.props.activeTask === this.props.task.id ? 'auto' : '0'}\n                >\n                    <textarea\n                        className={`\n                            w-full text-sfRegular text-13 transition-all duration-700 ease-in-out\n                            opacity-50\n                        `}\n                        type='text'\n                        placeholder=\"notes\"\n                        value={this.props.task.description}\n                        onChange={val => { this.props.editTask(this.getList().id, 'default', this.props.task.id, { description: val.target.value }) }} />\n                </AnimateHeight>\n            </div>\n\n        )\n    }\n\n    renderDate() {\n        return (\n            <div className={`col-span-11`}>\n                <AnimateHeight\n                    duration={500}\n                    height={this.props.activeTask === this.props.task.id ? 'auto' : '0'}\n                >\n                    date\n                </AnimateHeight>\n            </div>\n        )\n    }\n\n\n    render() {\n        return (\n            <div\n                className=\"grid grid-cols-12 w-full gap-y-2\"\n                onClick={() => { this.props.selectNewTask(this.props.id) }}>\n                {this.renderCheckCircle()}\n                {this.renderTaskContent()}\n                <div className=\"h-0\"></div>\n                {this.renderNotes()}\n                <div className=\"h-0\"></div>\n                {this.renderDate()}\n                <div className=\"h-0\"></div>\n                <hr className={`\n                    col-span-11 opacity-10 mb-2\n                    ${this.props.activeTask === this.props.task.id ? '' : 'mt-03'}\n                `} />\n            </div>\n        );\n    }\n}\n\nexport default Task;","/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js",[],"/Users/shaunjorstad/Desktop/tasks/src/data.js",["90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":14,"nodeType":"98","messageId":"99","endLine":5,"endColumn":17},{"ruleId":"96","severity":1,"message":"100","line":5,"column":19,"nodeType":"98","messageId":"99","endLine":5,"endColumn":22},{"ruleId":"96","severity":1,"message":"101","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":20},{"ruleId":"96","severity":1,"message":"102","line":6,"column":5,"nodeType":"98","messageId":"99","endLine":6,"endColumn":10},{"ruleId":"96","severity":1,"message":"103","line":7,"column":5,"nodeType":"98","messageId":"99","endLine":7,"endColumn":13},{"ruleId":"96","severity":1,"message":"104","line":8,"column":5,"nodeType":"98","messageId":"99","endLine":8,"endColumn":8},{"ruleId":"105","severity":1,"message":"106","line":15,"column":37,"nodeType":"107","messageId":"108","endLine":15,"endColumn":39},{"ruleId":"105","severity":1,"message":"109","line":33,"column":24,"nodeType":"107","messageId":"108","endLine":33,"endColumn":26},{"ruleId":"96","severity":1,"message":"110","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":12},{"ruleId":"111","severity":1,"message":"112","line":69,"column":9,"nodeType":"113","messageId":"114","endLine":69,"endColumn":25},{"ruleId":"96","severity":1,"message":"115","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":19},{"ruleId":"96","severity":1,"message":"116","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":21},{"ruleId":"96","severity":1,"message":"117","line":3,"column":23,"nodeType":"98","messageId":"99","endLine":3,"endColumn":30},{"ruleId":"96","severity":1,"message":"118","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"97","line":1,"column":14,"nodeType":"98","messageId":"99","endLine":1,"endColumn":17},{"ruleId":"96","severity":1,"message":"100","line":1,"column":19,"nodeType":"98","messageId":"99","endLine":1,"endColumn":22},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'inc' is defined but never used.","Identifier","unusedVar","'dec' is defined but never used.","'Task' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Tile' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'flaggedLogo' is defined but never used.","'getTestData' is defined but never used.","'logData' is defined but never used.","'DatePicker' is defined but never used.","no-global-assign","no-unsafe-negation"]