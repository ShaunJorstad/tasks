[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/NavBar.js":"4","/Users/shaunjorstad/Desktop/tasks/src/Content.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Tile.js":"6","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"7","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"8","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"9","/Users/shaunjorstad/Desktop/tasks/src/ListTile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/ContentHeader.js":"11"},{"size":500,"mtime":1607809103543,"results":"12","hashOfConfig":"13"},{"size":1776,"mtime":1608510096231,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1607809103547,"results":"15","hashOfConfig":"13"},{"size":2034,"mtime":1608512592538,"results":"16","hashOfConfig":"13"},{"size":544,"mtime":1608515456562,"results":"17","hashOfConfig":"13"},{"size":2477,"mtime":1608507196534,"results":"18","hashOfConfig":"13"},{"size":431,"mtime":1608334991672,"results":"19","hashOfConfig":"13"},{"size":1454,"mtime":1608509028529,"results":"20","hashOfConfig":"13"},{"size":2717,"mtime":1608512620153,"results":"21","hashOfConfig":"13"},{"size":1748,"mtime":1608506269964,"results":"22","hashOfConfig":"13"},{"size":707,"mtime":1608515584010,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"whis6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["49","50"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["51","52","53","54"],"import './App.css';\nimport React from 'react';\nimport NavBar from './NavBar.js';\nimport Content from './Content.js';\nimport 'tailwindcss/tailwind.css';\nimport { Task, List, Lists } from './DataStructures.js';\nimport { getLists, createList, testConnection } from './Queries.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lists: {},\n      todayCount: 0,\n      upcomingCount: 0,\n      allCount: 0,\n      selectedList: \"today\",\n    }\n    if (Object.keys(this.state.lists).length === 0) {\n      this.constructLists();\n    }\n    // testConnection();\n    this.selectNewList = this.selectNewList.bind(this)\n    this.createList = this.createList.bind(this)\n  }\n\n  selectNewList = (listName) => {\n    this.setState({\n      selectedList: listName\n    })\n  }\n\n  createList() {\n    let newList = createList({\n      name: 'new list',\n      color: 'blue', \n      order: Object.values(this.state.lists).length\n    })\n    let updatedLists = this.state.lists\n    updatedLists[newList.id] = newList\n    this.setState({\n      lists: updatedLists\n    })\n  }\n\n  constructLists() {\n    getLists().then((currentLists) => {\n      this.setState({\n        lists: currentLists\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"flex w-full h-screen\">\n        <NavBar\n          lists={this.state.lists}\n          todayCount={this.state.todayCount}\n          upcomingCount={this.state.upcomingCount}\n          allCount={this.state.allCount}\n          selectedList={this.state.selectedList}\n          selectNewList={this.selectNewList}\n          createList={this.createList}\n        />\n        <Content\n          selectedList={this.state.selectedList}\n          lists={this.state.lists} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/NavBar.js",["55"],"/Users/shaunjorstad/Desktop/tasks/src/Content.js",["56"],"/Users/shaunjorstad/Desktop/tasks/src/Tile.js",["57"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from './icons/today.svg';\nimport allLogo from './icons/all.svg';\nimport upcomingLogo from './icons/upcoming.svg';\nimport flaggedLogo from './icons/flagged.svg';\nimport './index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => { this.props.selectNewList(this.props.title) }\n                }>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",[],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["58","59","60","61"],"/Users/shaunjorstad/Desktop/tasks/src/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/ContentHeader.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":14},{"ruleId":"66","severity":1,"message":"70","line":6,"column":16,"nodeType":"68","messageId":"69","endLine":6,"endColumn":20},{"ruleId":"66","severity":1,"message":"71","line":6,"column":22,"nodeType":"68","messageId":"69","endLine":6,"endColumn":27},{"ruleId":"66","severity":1,"message":"72","line":7,"column":32,"nodeType":"68","messageId":"69","endLine":7,"endColumn":46},{"ruleId":"66","severity":1,"message":"73","line":4,"column":10,"nodeType":"68","messageId":"69","endLine":4,"endColumn":12},{"ruleId":"74","severity":1,"message":"75","line":5,"column":3,"nodeType":"76","messageId":"77","endLine":7,"endColumn":4},{"ruleId":"66","severity":1,"message":"78","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":2,"column":16,"nodeType":"68","messageId":"69","endLine":2,"endColumn":20},{"ruleId":"66","severity":1,"message":"79","line":6,"column":5,"nodeType":"68","messageId":"69","endLine":6,"endColumn":10},{"ruleId":"66","severity":1,"message":"80","line":7,"column":5,"nodeType":"68","messageId":"69","endLine":7,"endColumn":13},{"ruleId":"66","severity":1,"message":"81","line":8,"column":5,"nodeType":"68","messageId":"69","endLine":8,"endColumn":8},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Task' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Lists' is defined but never used.","'testConnection' is defined but never used.","'db' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'flaggedLogo' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]