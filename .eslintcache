[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/NavBar.js":"4","/Users/shaunjorstad/Desktop/tasks/src/Content.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Tile.js":"6","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"7","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"8","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"9","/Users/shaunjorstad/Desktop/tasks/src/ListTile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/ContentHeader.js":"11","/Users/shaunjorstad/Desktop/tasks/src/Config.js":"12"},{"size":500,"mtime":1607809103543,"results":"13","hashOfConfig":"14"},{"size":2787,"mtime":1608537884559,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607809103547,"results":"16","hashOfConfig":"14"},{"size":2129,"mtime":1608583236253,"results":"17","hashOfConfig":"14"},{"size":2273,"mtime":1608585161311,"results":"18","hashOfConfig":"14"},{"size":2477,"mtime":1608507196534,"results":"19","hashOfConfig":"14"},{"size":431,"mtime":1608334991672,"results":"20","hashOfConfig":"14"},{"size":1454,"mtime":1608509028529,"results":"21","hashOfConfig":"14"},{"size":3005,"mtime":1608537940553,"results":"22","hashOfConfig":"14"},{"size":3107,"mtime":1608535100424,"results":"23","hashOfConfig":"14"},{"size":4368,"mtime":1608585018092,"results":"24","hashOfConfig":"14"},{"size":4598,"mtime":1608584712945,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"whis6",{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["54","55"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["56","57","58","59"],"import './App.css';\nimport React from 'react';\nimport NavBar from './NavBar.js';\nimport Content from './Content.js';\nimport 'tailwindcss/tailwind.css';\nimport { Task, List, Lists } from './DataStructures.js';\nimport { getLists, changeListName, changeListColor, removeList, createList, testConnection } from './Queries.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lists: {},\n      todayCount: 0,\n      upcomingCount: 0,\n      allCount: 0,\n      selectedList: \"today\",\n    }\n    if (Object.keys(this.state.lists).length === 0) {\n      this.constructLists();\n    }\n    // testConnection();\n    this.selectNewList = this.selectNewList.bind(this)\n    this.updateListName = this.updateListName.bind(this)\n    this.updateListColor = this.updateListColor.bind(this)\n    this.deleteList = this.deleteList.bind(this)\n    this.createList = this.createList.bind(this)\n  }\n\n  updateListName(newName, listId) {\n    let updatedLists = this.state.lists\n    updatedLists[listId].name = newName\n    this.setState({\n      lists: updatedLists\n    })\n    changeListName(newName, listId)\n  }\n\n  updateListColor(newColor, listId) {\n    let updatedLists = this.state.lists\n    updatedLists[listId].color = newColor\n    this.setState({\n      lists: updatedLists\n    })\n    changeListColor(newColor, listId)\n  }\n\n  deleteList(listId) {\n    let updatedLists = this.state.lists\n    delete updatedLists[listId]\n    console.log(updatedLists)\n    this.setState({\n      selectedList: 'today',\n      lists: updatedLists\n    })\n    removeList(listId)\n  }\n\n\n\n  selectNewList = (listName) => {\n    this.setState({\n      selectedList: listName\n    })\n  }\n\n  createList() {\n    let newList = createList({\n      name: 'new list',\n      color: 'blue',\n      order: Object.values(this.state.lists).length - 2\n    })\n    let updatedLists = this.state.lists\n    updatedLists[newList.id] = newList\n    this.setState({\n      lists: updatedLists\n    })\n  }\n\n  constructLists() {\n    getLists().then((currentLists) => {\n      this.setState({\n        lists: currentLists\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"flex w-full h-screen\">\n        <NavBar\n          lists={this.state.lists}\n          todayCount={this.state.todayCount}\n          upcomingCount={this.state.upcomingCount}\n          allCount={this.state.allCount}\n          selectedList={this.state.selectedList}\n          selectNewList={this.selectNewList}\n          createList={this.createList}\n        />\n        <Content\n          selectedList={this.state.selectedList}\n          lists={this.state.lists}\n          updateListName={this.updateListName}\n          updateListColor={this.updateListColor} \n          deleteList={this.deleteList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/NavBar.js",["60"],"/Users/shaunjorstad/Desktop/tasks/src/Content.js",["61"],"/Users/shaunjorstad/Desktop/tasks/src/Tile.js",["62"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from './icons/today.svg';\nimport allLogo from './icons/all.svg';\nimport upcomingLogo from './icons/upcoming.svg';\nimport flaggedLogo from './icons/flagged.svg';\nimport './index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => { this.props.selectNewList(this.props.title) }\n                }>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",[],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["63","64","65","66"],"import { db } from './FirebaseConfig';\nimport { List, Task } from './DataStructures.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nlet allLists = null;\nlet today = 0;\nlet upcoming = 0;\nlet all = 0;\n\n// Lists Management\nexport function getLists() {\n    if (allLists != null) {\n        return new Promise((resolve, reject) => {\n            resolve(\n                allLists\n            );\n        });\n    }\n    return new Promise((resolve, reject) => {\n        // console.log(\"querying firebase\");\n        db.collection('lists').get().then((lists) => {\n            let tmplists = {};\n            lists.forEach((list) => {\n                tmplists[list.data().config.id] = new List(list.data());\n            });\n            tmplists.today = new List({ config: {name: 'today', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: {order: 0, tasks: {}}}})\n            tmplists.upcoming = new List({ config: {name: 'upcoming', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: {order: 0, tasks: {}}}})\n            tmplists.all = new List({ config: {name: 'all', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: {order: 0, tasks: {}}}})\n            \n            allLists = tmplists;\n            resolve(allLists);\n        }).catch(function (error) {\n            reject(\"error getting document\");\n        });\n    });\n}\n\nexport function getCounts() {\n    if (allLists != null) {\n        allLists.forEach((list) => {\n\n        });\n    }\n    return getLists().then((result) => {\n        getCounts();\n    });\n}\n\nexport function removeList(listId) {\n    db.collection('lists').doc(listId).delete()\n}\n\n/**\n * adds a new list to firestore\n * @param {*} config  {name, order, color}\n */\nexport function createList(config) {\n    // create list locally \n    let listConfig = config\n    listConfig['id'] = uuidv4()\n    let newList = new List({\n        config: listConfig,\n        taskCount: 0,\n        sections: {\n            default: {\n                order: 0,\n                tasks: {}\n            },\n            second: {\n                order: 1,\n                tasks: {}\n            }\n        }\n    })\n    // create list remotely\n    // console.log(JSON.stringify(newList.toObject()))\n    db.collection(\"lists\").doc(listConfig.id).set(newList.toObject())\n    return newList;\n}\n\nexport function updateListConfig(listName, config) {\n\n}\n\nexport function changeListName(newName, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.name\": newName\n    })\n}\n\nexport function changeListColor(newColor, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.color\": newColor\n    })\n}\n\n\n// Task Management\nexport function createTask(task) {\n\n}\n\nexport function completeTask(task) {\n\n}\n\nexport function editTask(task) {\n\n}\n\nexport function testConnection() {\n    createList({\n        name: 'yet another list!',\n        order: 0,\n        color: 'blue'\n    });\n}\n\n// export function createNewList() {\n//     createList({\n\n//     })\n// }","/Users/shaunjorstad/Desktop/tasks/src/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/ContentHeader.js",[],"/Users/shaunjorstad/Desktop/tasks/src/Config.js",["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":6,"column":10,"nodeType":"75","messageId":"76","endLine":6,"endColumn":14},{"ruleId":"73","severity":1,"message":"77","line":6,"column":16,"nodeType":"75","messageId":"76","endLine":6,"endColumn":20},{"ruleId":"73","severity":1,"message":"78","line":6,"column":22,"nodeType":"75","messageId":"76","endLine":6,"endColumn":27},{"ruleId":"73","severity":1,"message":"79","line":7,"column":77,"nodeType":"75","messageId":"76","endLine":7,"endColumn":91},{"ruleId":"73","severity":1,"message":"80","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":12},{"ruleId":"81","severity":1,"message":"82","line":59,"column":9,"nodeType":"83","messageId":"84","endLine":59,"endColumn":25},{"ruleId":"73","severity":1,"message":"85","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":2,"column":16,"nodeType":"75","messageId":"76","endLine":2,"endColumn":20},{"ruleId":"73","severity":1,"message":"86","line":6,"column":5,"nodeType":"75","messageId":"76","endLine":6,"endColumn":10},{"ruleId":"73","severity":1,"message":"87","line":7,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":13},{"ruleId":"73","severity":1,"message":"88","line":8,"column":5,"nodeType":"75","messageId":"76","endLine":8,"endColumn":8},{"ruleId":"89","severity":1,"message":"90","line":15,"column":37,"nodeType":"91","messageId":"92","endLine":15,"endColumn":39},{"ruleId":"89","severity":1,"message":"93","line":33,"column":24,"nodeType":"91","messageId":"92","endLine":33,"endColumn":26},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Task' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Lists' is defined but never used.","'testConnection' is defined but never used.","'db' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'flaggedLogo' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]