[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"4","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"6","/Users/shaunjorstad/Desktop/tasks/src/Config.js":"7","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js":"8","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js":"9","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js":"11","/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js":"12","/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js":"13","/Users/shaunjorstad/Desktop/tasks/src/components/Task.js":"14","/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js":"15","/Users/shaunjorstad/Desktop/tasks/src/data.js":"16","/Users/shaunjorstad/Desktop/tasks/src/components/TaskSection.js":"17"},{"size":500,"mtime":1607809103543,"results":"18","hashOfConfig":"19"},{"size":7301,"mtime":1609297099172,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1607809103547,"results":"21","hashOfConfig":"19"},{"size":657,"mtime":1609261364556,"results":"22","hashOfConfig":"19"},{"size":2592,"mtime":1609216593423,"results":"23","hashOfConfig":"19"},{"size":3991,"mtime":1608939312965,"results":"24","hashOfConfig":"19"},{"size":4641,"mtime":1609216593423,"results":"25","hashOfConfig":"19"},{"size":2082,"mtime":1609216593426,"results":"26","hashOfConfig":"19"},{"size":2640,"mtime":1609216593424,"results":"27","hashOfConfig":"19"},{"size":2482,"mtime":1608921365848,"results":"28","hashOfConfig":"19"},{"size":3241,"mtime":1609216593425,"results":"29","hashOfConfig":"19"},{"size":4666,"mtime":1609216593424,"results":"30","hashOfConfig":"19"},{"size":3711,"mtime":1609296496806,"results":"31","hashOfConfig":"19"},{"size":3799,"mtime":1609297169527,"results":"32","hashOfConfig":"19"},{"size":10503,"mtime":1609297328424,"results":"33","hashOfConfig":"19"},{"size":1826,"mtime":1609200259285,"results":"34","hashOfConfig":"19"},{"size":2872,"mtime":1609297096694,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"whis6",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["79","80"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["81","82"],"/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",[],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],["83","84"],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["85","86","87","88"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { List, Task } from './DataStructures.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nlet allLists = null;\nlet today = 0;\nlet upcoming = 0;\nlet all = 0;\n\n// Lists Management\nexport function getLists() {\n    if (allLists != null) {\n        return new Promise((resolve, reject) => {\n            resolve(\n                allLists\n            );\n        });\n    }\n    return new Promise((resolve, reject) => {\n        // console.log(\"querying firebase\");\n        db.collection('lists').get().then((lists) => {\n            let tmplists = {};\n            lists.forEach((list) => {\n                tmplists[list.data().config.id] = new List(list.data());\n            });\n            tmplists.today = new List({ config: { name: 'today', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.upcoming = new List({ config: { name: 'upcoming', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.all = new List({ config: { name: 'all', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n\n            allLists = tmplists;\n            resolve(allLists);\n        }).catch(function (error) {\n            reject(\"error getting document\");\n        });\n    });\n}\n\nexport function getCounts() {\n    if (allLists != null) {\n        allLists.forEach((list) => {\n\n        });\n    }\n    return getLists().then((result) => {\n        getCounts();\n    });\n}\n\nexport function removeList(listId) {\n    db.collection('lists').doc(listId).delete()\n}\n\n/**\n * adds a new list to firestore\n * @param {*} config  {name, order, color}\n */\nexport function fcreateList(config) {\n    // create list locally \n    let listConfig = config\n    listConfig['id'] = uuidv4()\n    let newList = new List({\n        config: listConfig,\n        taskCount: 0,\n        sections: {\n            default: {\n                order: 0,\n                tasks: {}\n            },\n            second: {\n                order: 1,\n                tasks: {}\n            }\n        }\n    })\n    // create list remotely\n    // console.log(JSON.stringify(newList.toObject()))\n    console.log('pushing to firebase')\n    console.log(JSON.stringify(newList))\n    console.log(newList.toObject())\n    db.collection(\"lists\").doc(listConfig.id).set(newList.toObject())\n    return newList;\n}\n\nexport function updateListConfig(listName, config) {\n\n}\n\nexport function changeListName(newName, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.name\": newName\n    })\n}\n\nexport function changeListColor(newColor, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.color\": newColor\n    })\n}\n\n\n// Task Management\nexport function fireCreateTask(listID, sectionName, task) {\n    let newTask = {}\n    newTask[`sections.${sectionName}.tasks.${task.id}`] = task.toObject()\n    newTask[`taskCount`] = inc\n    db.collection('lists').doc(listID).update(newTask).then()\n}\n\nexport function fcompleteTask(listId, sectionName, taskId) {\n    let completeTask = {}\n    completeTask[`sections.${sectionName}.tasks.${taskId}`] = del\n    completeTask[`taskCount`] = dec\n    db.collection('lists').doc(listId).update(completeTask)\n}\n\nexport function updateTask(listId, sectionName, taskId, taskData) {\n    let taskUpdate = {}\n    for (let key in taskData) {\n        taskUpdate[`sections.${sectionName}.tasks.${taskId}.${key}`] = taskData[key]\n    }\n    console.log('attempting to push to firebase:')\n    console.log(taskUpdate)\n    db.collection('lists').doc(listId).update(taskUpdate)\n        .catch(function (error) {\n            console.error(\"Error updating document: \", error);\n        });\n}\n\nexport function testConnection() {\n    fcreateList({\n        name: 'yet another list!',\n        order: 0,\n        color: 'blue'\n    });\n}\n\n// export function createNewList() {\n//     createList({\n\n//     })\n// }","/Users/shaunjorstad/Desktop/tasks/src/Config.js",["89","90"],"import React from 'react';\n\nclass Config extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameInput: this.props.lists[this.props.selectedList].name,\n            validName: true,\n            colorInput: this.getList().color,\n            validColor: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedList != prevProps.selectedList) {\n            this.setState({\n                nameInput: this.getList().name,\n                validName: true,\n                colorInput: this.getList().color,\n                validColor: true\n            })\n        }\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    processNameChange(val) {\n        this.setState({\n            nameInput: val\n        })\n        if (val.length == 0 || ['today', 'upcoming', 'all'].includes(val)) {\n            this.setState({\n                validName: false\n            })\n        } else {\n            this.setState({\n                validName: true\n            })\n            this.props.updateListName(val, this.getList().id)\n        }\n    }\n\n    processColorChange(val) {\n        this.setState({\n            colorInput: val\n        })\n        if (!['green', 'blue', 'teal', 'pink', 'purple', 'orange'].includes(val)) {\n            this.setState({\n                validColor: false\n            })\n        } else {\n            this.setState({\n                validColor: true\n            })\n            this.props.updateListColor(val, this.getList().id)\n        }\n    }\n\n    renderColorOptions() {\n        return (\n            <div className=\"col-span-3 grid grid-cols-6 \">\n                <div className=\"h-10 w-10 rounded-lg bg-pink transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('pink') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-blue transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('blue') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-purple transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('purple') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-orange transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('orange') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-teal transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('teal') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-green transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('green') }}></div>\n            </div>\n        )\n    }\n\n\n    renderTitleInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg ${this.state.validName ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.nameInput}\n                onChange={val => { this.processNameChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderColorInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg text-${this.getList().color} ${this.state.validColor ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.colorInput}\n                onChange={val => { this.processColorChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderDeleteButton() {\n        return (\n            <div className=\"select-none cursor-pointer bg-lightRed text-red col-span-3 px-4 py-4 rounded-lg mt-48 flex justify-center\" onClick={() => { this.props.deleteList(this.getList().id) }}>\n                <p className=\"\">delete</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"mt-20 w-3/5 grid grid-cols-4 gap-y-7\">\n                <div className=\"configLabel\">\n                    <p>Title</p>\n                </div>\n                {this.renderTitleInput()}\n                <div className=\"configLabel\">\n                    <p>Color</p>\n                </div>\n                {/* {this.renderColorInput()} */}\n                {this.renderColorOptions()}\n                <div></div>\n                {this.renderDeleteButton()}\n            </div>\n        );\n    }\n}\n\nexport default Config;","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js",["91"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport Tile from './Tile.js';\nimport ListTile from './ListTile.js';\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n\n  render() {\n    let listTiles = Object.values(this.props.lists).sort((a, b) => { return a.order - b.order }).map(list =>\n      <ListTile\n        list={list}\n        lists={this.props.lists}\n        tasks={this.props.tasks}\n        selectedList={this.props.selectedList}\n        rootHandlers={this.props.rootHandlers}\n      />)\n\n    return (\n      <div className=\"bg-navBackground h-full w-372 transition-all duration-700 ease-in-out dynamicNav\">\n        <div className=\"px-2 h-full\">\n          <input className=\"w-full mt-9 py-1 bg-tileUnselected border-tileUnselectedBorder border-2 px-3 rounded-md text-sm\" type=\"text\" id=\"searchBar\" placeholder=\"search\"></input>\n          <div className=\"grid mt-5 grid-cols-2 gap-x-3 gap-y-3\">\n            {/* <Tile\n              title=\"today\"\n              icon=\"today\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"upcoming\"\n              icon=\"upcoming\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"all\"\n              icon=\"all\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} /> */}\n          </div>\n\n          <div className=\"mt-10 h-lists\">\n            {listTiles}\n          </div>\n          <div className=\"flex items-center cursor-pointer\">\n            <p\n              className=\"select-none place-self-center text-center pl-2 pt-4 newListButton text-gray\"\n              onClick={() => { this.props.rootHandlers.createList() }}\n            >+ Add List</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js",["92"],"import React from 'react';\nimport ContentHeader from './ContentHeader';\nimport Config from '../Config.js';\nimport ListAll from './ListAll.js';\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: 'all',\n      view: 'list'\n    }\n    this.updateFilter = this.updateFilter.bind(this);\n    this.updateView = this.updateView.bind(this);\n    this.contentHandlers = {\n      updateFilter: this.updateFilter,\n      updateView: this.updateView\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedList !== this.props.selectedList && ['today', 'all', 'upcoming'].includes(this.props.selectedList)) {\n      this.setState({\n        filter: 'all',\n        view: 'list'\n      })\n    }\n  }\n\n  updateFilter(newFilter) {\n    if (this.state.view === 'config') {\n      this.setState({ filter: newFilter, view: 'list' })\n    } else {\n      this.setState({ filter: newFilter });\n    }\n  }\n\n  updateView(newView) {\n    this.setState({ view: newView });\n  }\n\n  renderContents() {\n    switch (this.state.view) {\n      case \"config\":\n        return (\n          <Config\n            lists={this.props.lists}\n            tasks={this.props.tasks}\n            selectedList={this.props.selectedList}\n            rootHandlers={this.props.rootHandlers}\n          />\n        );\n      case \"list\":\n        switch (this.state.filter) {\n          case \"all\":\n            return <ListAll\n              lists={this.props.lists}\n              tasks={this.props.tasks}\n              selectedList={this.props.selectedList}\n              rootHandlers={this.props.rootHandlers}\n            />\n          case 'today':\n            return ('today')\n          case 'upcoming':\n            return ('upcoming')\n          default:\n            return 'error'\n        }\n        return ('list');\n      case \"calendar\":\n        return ('calendar')\n      default:\n        return 'error'\n    }\n  }\n\n  render() {\n    if (Object.values(this.props.lists).length === 0) {\n      return (\n        <div></div>\n      );\n    }\n\n    return (\n      <div className=\"bg-blue-200 h-full w-full\">\n        <div className=\"mx-4 w-9/10 h-full\">\n          <ContentHeader\n            lists={this.props.lists}\n            tasks={this.props.tasks}\n            selectedList={this.props.selectedList}\n            filter={this.state.filter}\n            view={this.state.view}\n            contentHandlers={this.contentHandlers}\n            rootHandlers={this.props.rootHandlers}\n          />\n          <div className=\"h-5/6\">\n            {this.renderContents()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js",["93"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from '../icons/today.svg';\nimport allLogo from '../icons/all.svg';\nimport upcomingLogo from '../icons/upcoming.svg';\nimport flaggedLogo from '../icons/flagged.svg';\nimport '../index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => { this.props.selectNewList(this.props.title) }\n                }>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js",["94"],"/Users/shaunjorstad/Desktop/tasks/src/components/Task.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js",["95","96"],"/Users/shaunjorstad/Desktop/tasks/src/data.js",["97","98"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { v4 as uuidv4 } from 'uuid';\nimport Config from './config.json';\n\n\nclass data {\n    lists\n    tasks\n    constructor() {\n        this.lists = {}\n        this.tasks = {}\n\n        console.log(Config.email);\n        // todo: fetch all firebase data\n        \n    }\n\n    getList(listID) {\n        return this.lists[listID]\n    }\n\n    getLists() {\n        return this.lists        \n    }\n\n    // lists\n    createList() {\n        let newList = {\n            color: \"blue\",\n            order: Object.values(this.lists).length,\n            name: \"new list\",\n            id: uuidv4(),\n            sections: {}\n        }\n        this.lists[newList.id] = newList\n        let docUpdate = {}\n        docUpdate[`lists.${newList.id}`] = newList\n        db.collection('users').doc(Config.email).update(docUpdate)\n    }\n\n    editList(id, config) {\n        let docChanges = {}\n        for (let key in config) {\n            docChanges[`lists.${id}.${key}`] = config[key]\n            this.lists.id[key] = config[key]\n        }\n        db.collection('users').doc(Config.email).update(docChanges)\n    }\n\n    deleteList(id) {\n        delete this.lists.id \n        let deleteList = {} \n        deleteList[`lists.${id}`] = del\n        db.collection('users').doc(Config.email).update(deleteList)\n    }\n\n    // sections\n    createSection(listID) {\n\n    }\n\n    editSection(listID, sectionID, changes) {\n\n    }\n\n    deleteSection(listID, sectionID) {\n\n    }\n\n    // tasks\n    // createTask(listID, sectionID) {\n\n    // }\n\n    // editTask(listID, sectionID, taskID, changes) {\n\n    // }\n\n    // completeTask(listID, sectionID, taskID) {\n\n    // }\n\n    // getAllTasks() {\n\n    // }\n\n    // getTodayTasks() {\n\n    // }\n\n    // getUpcomingTasks() {\n\n    // }\n}\n\nexport var dataInstance = new data();",["99","100"],"/Users/shaunjorstad/Desktop/tasks/src/components/TaskSection.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":5,"column":14,"nodeType":"107","messageId":"108","endLine":5,"endColumn":17},{"ruleId":"105","severity":1,"message":"109","line":5,"column":19,"nodeType":"107","messageId":"108","endLine":5,"endColumn":22},{"ruleId":"101","replacedBy":"110"},{"ruleId":"103","replacedBy":"111"},{"ruleId":"105","severity":1,"message":"112","line":2,"column":16,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"113","line":6,"column":5,"nodeType":"107","messageId":"108","endLine":6,"endColumn":10},{"ruleId":"105","severity":1,"message":"114","line":7,"column":5,"nodeType":"107","messageId":"108","endLine":7,"endColumn":13},{"ruleId":"105","severity":1,"message":"115","line":8,"column":5,"nodeType":"107","messageId":"108","endLine":8,"endColumn":8},{"ruleId":"116","severity":1,"message":"117","line":15,"column":37,"nodeType":"118","messageId":"119","endLine":15,"endColumn":39},{"ruleId":"116","severity":1,"message":"120","line":33,"column":24,"nodeType":"118","messageId":"119","endLine":33,"endColumn":26},{"ruleId":"105","severity":1,"message":"121","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":12},{"ruleId":"122","severity":1,"message":"123","line":69,"column":9,"nodeType":"124","messageId":"125","endLine":69,"endColumn":25},{"ruleId":"105","severity":1,"message":"126","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":19},{"ruleId":"105","severity":1,"message":"112","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"105","severity":1,"message":"127","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":21},{"ruleId":"105","severity":1,"message":"128","line":116,"column":17,"nodeType":"107","messageId":"108","endLine":116,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":1,"column":14,"nodeType":"107","messageId":"108","endLine":1,"endColumn":17},{"ruleId":"105","severity":1,"message":"109","line":1,"column":19,"nodeType":"107","messageId":"108","endLine":1,"endColumn":22},{"ruleId":"101","replacedBy":"129"},{"ruleId":"103","replacedBy":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'inc' is defined but never used.","Identifier","unusedVar","'dec' is defined but never used.",["131"],["132"],"'Task' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Tile' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'flaggedLogo' is defined but never used.","'AnimateHeight' is defined but never used.","'parsedDate' is assigned a value but never used.",["131"],["132"],"no-global-assign","no-unsafe-negation"]