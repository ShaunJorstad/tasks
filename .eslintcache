[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"4","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"6","/Users/shaunjorstad/Desktop/tasks/src/Config.js":"7","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js":"8","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js":"9","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js":"11","/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js":"12","/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js":"13","/Users/shaunjorstad/Desktop/tasks/src/components/Task.js":"14"},{"size":500,"mtime":1607809103543,"results":"15","hashOfConfig":"16"},{"size":4019,"mtime":1608938798524,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1607809103547,"results":"18","hashOfConfig":"16"},{"size":603,"mtime":1608939344342,"results":"19","hashOfConfig":"16"},{"size":2629,"mtime":1608937778645,"results":"20","hashOfConfig":"16"},{"size":3991,"mtime":1608939312965,"results":"21","hashOfConfig":"16"},{"size":4598,"mtime":1608667097916,"results":"22","hashOfConfig":"16"},{"size":2130,"mtime":1608921313414,"results":"23","hashOfConfig":"16"},{"size":2620,"mtime":1608938514121,"results":"24","hashOfConfig":"16"},{"size":2482,"mtime":1608921365848,"results":"25","hashOfConfig":"16"},{"size":3134,"mtime":1608934474152,"results":"26","hashOfConfig":"16"},{"size":4524,"mtime":1608934505797,"results":"27","hashOfConfig":"16"},{"size":2148,"mtime":1608938528738,"results":"28","hashOfConfig":"16"},{"size":3238,"mtime":1609017993793,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"whis6",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["65","66"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["67","68","69","70"],"import './App.css';\nimport React from 'react';\nimport NavBar from './components/NavBar.js';\nimport Content from './components/Content.js';\nimport 'tailwindcss/tailwind.css';\nimport { Task, List, Lists } from './DataStructures.js';\nimport { getLists, updateTask, changeListName, changeListColor, removeList, fcreateList, fireCreateTask, testConnection, fcompleteTask } from './Queries.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lists: {},\n      todayCount: 0,\n      upcomingCount: 0,\n      allCount: 0,\n      selectedList: \"today\",\n    }\n    if (Object.keys(this.state.lists).length === 0) {\n      this.constructLists();\n    }\n    this.selectNewList = this.selectNewList.bind(this)\n    this.updateListName = this.updateListName.bind(this)\n    this.updateListColor = this.updateListColor.bind(this)\n    this.deleteList = this.deleteList.bind(this)\n    this.createList = this.createList.bind(this)\n    this.editTask = this.editTask.bind(this)\n    this.createTask = this.createTask.bind(this)\n    this.completeTask = this.completeTask.bind(this)\n  }\n\n  completeTask(listId, sectionName, taskId) {\n    let updatedLists = this.state.lists\n    updatedLists[listId].completeTask(sectionName, taskId)\n    this.setState({lists: updatedLists})\n    fcompleteTask(listId, sectionName, taskId)\n  }\n\n  createTask(listId, sectionName) {\n    let updatedLists = this.state.lists\n    let task = updatedLists[listId].createTask(listId, sectionName)\n    this.setState({ lists: updatedLists })\n    fireCreateTask(listId, sectionName, task)\n  }\n\n  editTask(listId, sectionName, taskId, taskData, publish = false) {\n    if (publish) {\n      // push to firestore\n      let taskObject = this.state.lists[listId].sections[sectionName].tasks[taskId].toObject()\n      updateTask(listId, sectionName, taskId, taskObject)\n      return\n    }\n    let updatedLists = this.state.lists\n    updatedLists[listId].sections[sectionName].tasks[taskId].update(taskData)\n    this.setState({ lists: updatedLists })\n  }\n\n  updateListName(newName, listId) {\n    let updatedLists = this.state.lists\n    updatedLists[listId].name = newName\n    this.setState({\n      lists: updatedLists\n    })\n    changeListName(newName, listId)\n  }\n\n  updateListColor(newColor, listId) {\n    let updatedLists = this.state.lists\n    updatedLists[listId].color = newColor\n    this.setState({\n      lists: updatedLists\n    })\n    changeListColor(newColor, listId)\n  }\n\n  deleteList(listId) {\n    let updatedLists = this.state.lists\n    delete updatedLists[listId]\n    console.log(updatedLists)\n    this.setState({\n      selectedList: 'today',\n      lists: updatedLists\n    })\n    removeList(listId)\n  }\n\n  selectNewList = (listName) => {\n    this.setState({\n      selectedList: listName\n    })\n  }\n\n  createList() {\n    let newList = fcreateList({\n      name: 'new list',\n      color: 'blue',\n      order: Object.values(this.state.lists).length - 2\n    })\n    let updatedLists = this.state.lists\n    updatedLists[newList.id] = newList\n    this.setState({\n      lists: updatedLists\n    })\n  }\n\n  constructLists() {\n    getLists().then((currentLists) => {\n      this.setState({\n        lists: currentLists\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"flex w-full h-screen\">\n        <NavBar\n          lists={this.state.lists}\n          todayCount={this.state.todayCount}\n          upcomingCount={this.state.upcomingCount}\n          allCount={this.state.allCount}\n          selectedList={this.state.selectedList}\n          selectNewList={this.selectNewList}\n          createList={this.createList}\n        />\n        <Content\n          selectedList={this.state.selectedList}\n          lists={this.state.lists}\n          updateListName={this.updateListName}\n          updateListColor={this.updateListColor}\n          deleteList={this.deleteList}\n          editTask={this.editTask}\n          createTask={this.createTask} \n          completeTask={this.completeTask}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",[],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["71","72","73","74"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { List, Task } from './DataStructures.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nlet allLists = null;\nlet today = 0;\nlet upcoming = 0;\nlet all = 0;\n\n// Lists Management\nexport function getLists() {\n    if (allLists != null) {\n        return new Promise((resolve, reject) => {\n            resolve(\n                allLists\n            );\n        });\n    }\n    return new Promise((resolve, reject) => {\n        // console.log(\"querying firebase\");\n        db.collection('lists').get().then((lists) => {\n            let tmplists = {};\n            lists.forEach((list) => {\n                tmplists[list.data().config.id] = new List(list.data());\n            });\n            tmplists.today = new List({ config: { name: 'today', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.upcoming = new List({ config: { name: 'upcoming', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.all = new List({ config: { name: 'all', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n\n            allLists = tmplists;\n            resolve(allLists);\n        }).catch(function (error) {\n            reject(\"error getting document\");\n        });\n    });\n}\n\nexport function getCounts() {\n    if (allLists != null) {\n        allLists.forEach((list) => {\n\n        });\n    }\n    return getLists().then((result) => {\n        getCounts();\n    });\n}\n\nexport function removeList(listId) {\n    db.collection('lists').doc(listId).delete()\n}\n\n/**\n * adds a new list to firestore\n * @param {*} config  {name, order, color}\n */\nexport function fcreateList(config) {\n    // create list locally \n    let listConfig = config\n    listConfig['id'] = uuidv4()\n    let newList = new List({\n        config: listConfig,\n        taskCount: 0,\n        sections: {\n            default: {\n                order: 0,\n                tasks: {}\n            },\n            second: {\n                order: 1,\n                tasks: {}\n            }\n        }\n    })\n    // create list remotely\n    // console.log(JSON.stringify(newList.toObject()))\n    console.log('pushing to firebase')\n    console.log(JSON.stringify(newList))\n    console.log(newList.toObject())\n    db.collection(\"lists\").doc(listConfig.id).set(newList.toObject())\n    return newList;\n}\n\nexport function updateListConfig(listName, config) {\n\n}\n\nexport function changeListName(newName, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.name\": newName\n    })\n}\n\nexport function changeListColor(newColor, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.color\": newColor\n    })\n}\n\n\n// Task Management\nexport function fireCreateTask(listID, sectionName, task) {\n    let newTask = {}\n    newTask[`sections.${sectionName}.tasks.${task.id}`] = task.toObject()\n    newTask[`taskCount`] = inc\n    db.collection('lists').doc(listID).update(newTask).then()\n}\n\nexport function fcompleteTask(listId, sectionName, taskId) {\n    let completeTask = {}\n    completeTask[`sections.${sectionName}.tasks.${taskId}`] = del\n    completeTask[`taskCount`] = dec\n    db.collection('lists').doc(listId).update(completeTask)\n}\n\nexport function updateTask(listId, sectionName, taskId, taskData) {\n    let taskUpdate = {}\n    for (let key in taskData) {\n        taskUpdate[`sections.${sectionName}.tasks.${taskId}.${key}`] = taskData[key]\n    }\n    console.log('attempting to push to firebase:')\n    console.log(taskUpdate)\n    db.collection('lists').doc(listId).update(taskUpdate)\n        .catch(function (error) {\n            console.error(\"Error updating document: \", error);\n        });\n}\n\nexport function testConnection() {\n    fcreateList({\n        name: 'yet another list!',\n        order: 0,\n        color: 'blue'\n    });\n}\n\n// export function createNewList() {\n//     createList({\n\n//     })\n// }","/Users/shaunjorstad/Desktop/tasks/src/Config.js",["75","76"],"import React from 'react';\n\nclass Config extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameInput: this.props.lists[this.props.selectedList].name,\n            validName: true,\n            colorInput: this.getList().color,\n            validColor: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedList != prevProps.selectedList) {\n            this.setState({\n                nameInput: this.getList().name,\n                validName: true,\n                colorInput: this.getList().color,\n                validColor: true\n            })\n        }\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    processNameChange(val) {\n        this.setState({\n            nameInput: val\n        })\n        if (val.length == 0 || ['today', 'upcoming', 'all'].includes(val)) {\n            this.setState({\n                validName: false\n            })\n        } else {\n            this.setState({\n                validName: true\n            })\n            this.props.updateListName(val, this.getList().id)\n        }\n    }\n\n    processColorChange(val) {\n        this.setState({\n            colorInput: val\n        })\n        if (!['green', 'blue', 'teal', 'pink', 'purple', 'orange'].includes(val)) {\n            this.setState({\n                validColor: false\n            })\n        } else {\n            this.setState({\n                validColor: true\n            })\n            this.props.updateListColor(val, this.getList().id)\n        }\n    }\n\n    renderColorOptions() {\n        return (\n            <div className=\"col-span-3 grid grid-cols-6 \">\n                <div className=\"h-10 w-10 rounded-lg bg-pink transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('pink') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-blue transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('blue') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-purple transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('purple') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-orange transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('orange') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-teal transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('teal') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-green transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('green') }}></div>\n            </div>\n        )\n    }\n\n\n    renderTitleInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg ${this.state.validName ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.nameInput}\n                onChange={val => { this.processNameChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderColorInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg text-${this.getList().color} ${this.state.validColor ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.colorInput}\n                onChange={val => { this.processColorChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderDeleteButton() {\n        return (\n            <div className=\"select-none cursor-pointer bg-lightRed text-red col-span-3 px-4 py-4 rounded-lg mt-48 flex justify-center\" onClick={() => { this.props.deleteList(this.getList().id) }}>\n                <p className=\"\">delete</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"mt-20 w-3/5 grid grid-cols-4 gap-y-7\">\n                <div className=\"configLabel\">\n                    <p>Title</p>\n                </div>\n                {this.renderTitleInput()}\n                <div className=\"configLabel\">\n                    <p>Color</p>\n                </div>\n                {/* {this.renderColorInput()} */}\n                {this.renderColorOptions()}\n                <div></div>\n                {this.renderDeleteButton()}\n            </div>\n        );\n    }\n}\n\nexport default Config;","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js",["77"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport Tile from './Tile.js';\nimport { db } from '../FirebaseConfig';\nimport ListTile from './ListTile.js';\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todayTasks: 5,\n      upcomingTasks: 10,\n      allTasks: 15,\n      flaggedTasks: 30\n    }\n  }\n\n\n  render() {\n    let listTiles = Object.values(this.props.lists).filter(list => list.id !== 0).sort((a, b) => {return a.order - b.order}).map(list => \n      <ListTile\n        key={list.id}\n        list={list}\n        selectedList={this.props.selectedList}\n        selectNewList={this.props.selectNewList} />)\n\n    return (\n      <div className=\"bg-navBackground h-full w-372 transition-all duration-700 ease-in-out dynamicNav\">\n        <div className=\"px-2 h-full\">\n          <input className=\"w-full mt-9 py-1 bg-tileUnselected border-tileUnselectedBorder border-2 px-3 rounded-md text-sm\" type=\"text\" id=\"searchBar\" placeholder=\"search\"></input>\n          <div className=\"grid mt-5 grid-cols-2 gap-x-3 gap-y-3\">\n            <Tile\n              title=\"today\"\n              icon=\"today\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"upcoming\"\n              icon=\"upcoming\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n            <Tile\n              title=\"all\"\n              icon=\"all\"\n              taskCount='40'\n              selectedList={this.props.selectedList}\n              selectNewList={this.props.selectNewList} />\n          </div>\n\n          <div className=\"mt-10 h-lists\">\n            {listTiles}\n          </div>\n          <div className=\"flex items-center cursor-pointer\">\n            <p className=\"select-none place-self-center text-center pl-2 pt-4 newListButton text-gray\" onClick={() => { this.props.createList() }}>+ Add List</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js",["78"],"import React from 'react';\nimport ContentHeader from './ContentHeader';\nimport Config from '../Config.js';\nimport ListAll from './ListAll.js';\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: 'all',\n      view: 'list'\n    }\n    this.updateFilter = this.updateFilter.bind(this);\n    this.updateView = this.updateView.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedList !== this.props.selectedList && ['today', 'all', 'upcoming'].includes(this.props.selectedList)) {\n      this.setState({\n        filter: 'all',\n        view: 'list'\n      })\n    }\n  }\n\n  updateFilter(newFilter) {\n    if (this.state.view === 'config') {\n      this.setState({ filter: newFilter, view: 'list' })\n    } else {\n      this.setState({ filter: newFilter });\n    }\n  }\n\n  updateView(newView) {\n    this.setState({ view: newView });\n  }\n\n  renderContents() {\n    switch (this.state.view) {\n      case \"config\":\n        return (\n          <Config\n            lists={this.props.lists}\n            selectedList={this.props.selectedList}\n            updateListName={this.props.updateListName}\n            updateListColor={this.props.updateListColor}\n            deleteList={this.props.deleteList} />\n        );\n      case \"list\":\n        switch (this.state.filter) {\n          case \"all\":\n            return <ListAll\n              lists={this.props.lists} \n              selectedList={this.props.selectedList}\n              editTask={this.props.editTask}\n              createTask={this.props.createTask}\n              completeTask={this.props.completeTask}/>\n          case 'today':\n            return ('today')\n          case 'upcoming':\n            return ('upcoming')\n          default:\n            return 'error'\n        }\n        return ('list');\n      case \"calendar\":\n        return ('calendar')\n      default:\n        return 'error'\n    }\n  }\n\n  render() {\n    if (Object.values(this.props.lists).length === 0) {\n      return (\n        <div></div>\n      );\n    }\n\n    return (\n      <div className=\"bg-blue-200 h-full w-full\">\n        <div className=\"mx-4 w-9/10 h-full\">\n          <ContentHeader\n            lists={this.props.lists}\n            selectedList={this.props.selectedList}\n            filter={this.state.filter}\n            view={this.state.view}\n            updateFilter={this.updateFilter}\n            updateView={this.updateView} \n            createTask={this.props.createTask}/>\n          <div className=\"h-5/6\">\n            {this.renderContents()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js",["79"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from '../icons/today.svg';\nimport allLogo from '../icons/all.svg';\nimport upcomingLogo from '../icons/upcoming.svg';\nimport flaggedLogo from '../icons/flagged.svg';\nimport '../index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => { this.props.selectNewList(this.props.title) }\n                }>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ListAll.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/Task.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":14},{"ruleId":"84","severity":1,"message":"88","line":6,"column":16,"nodeType":"86","messageId":"87","endLine":6,"endColumn":20},{"ruleId":"84","severity":1,"message":"89","line":6,"column":22,"nodeType":"86","messageId":"87","endLine":6,"endColumn":27},{"ruleId":"84","severity":1,"message":"90","line":7,"column":106,"nodeType":"86","messageId":"87","endLine":7,"endColumn":120},{"ruleId":"84","severity":1,"message":"85","line":2,"column":16,"nodeType":"86","messageId":"87","endLine":2,"endColumn":20},{"ruleId":"84","severity":1,"message":"91","line":6,"column":5,"nodeType":"86","messageId":"87","endLine":6,"endColumn":10},{"ruleId":"84","severity":1,"message":"92","line":7,"column":5,"nodeType":"86","messageId":"87","endLine":7,"endColumn":13},{"ruleId":"84","severity":1,"message":"93","line":8,"column":5,"nodeType":"86","messageId":"87","endLine":8,"endColumn":8},{"ruleId":"94","severity":1,"message":"95","line":15,"column":37,"nodeType":"96","messageId":"97","endLine":15,"endColumn":39},{"ruleId":"94","severity":1,"message":"98","line":33,"column":24,"nodeType":"96","messageId":"97","endLine":33,"endColumn":26},{"ruleId":"84","severity":1,"message":"99","line":4,"column":10,"nodeType":"86","messageId":"87","endLine":4,"endColumn":12},{"ruleId":"100","severity":1,"message":"101","line":65,"column":9,"nodeType":"102","messageId":"103","endLine":65,"endColumn":25},{"ruleId":"84","severity":1,"message":"104","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":19},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'Task' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Lists' is defined but never used.","'testConnection' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'db' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'flaggedLogo' is defined but never used.","no-global-assign","no-unsafe-negation"]