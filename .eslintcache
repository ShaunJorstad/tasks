[{"/Users/shaunjorstad/Desktop/tasks/src/index.js":"1","/Users/shaunjorstad/Desktop/tasks/src/App.js":"2","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js":"3","/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js":"4","/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js":"5","/Users/shaunjorstad/Desktop/tasks/src/Queries.js":"6","/Users/shaunjorstad/Desktop/tasks/src/Config.js":"7","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js":"8","/Users/shaunjorstad/Desktop/tasks/src/components/Content.js":"9","/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js":"10","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js":"11","/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js":"12","/Users/shaunjorstad/Desktop/tasks/src/components/Task.js":"13","/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js":"14","/Users/shaunjorstad/Desktop/tasks/src/data.js":"15","/Users/shaunjorstad/Desktop/tasks/src/components/TaskSection.js":"16","/Users/shaunjorstad/Desktop/tasks/src/components/List.js":"17","/Users/shaunjorstad/Desktop/tasks/src/components/Onboard.js":"18","/Users/shaunjorstad/Desktop/tasks/src/components/InputField.js":"19"},{"size":500,"mtime":1607809103543,"results":"20","hashOfConfig":"21"},{"size":8759,"mtime":1609869364343,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1607809103547,"results":"23","hashOfConfig":"21"},{"size":1909,"mtime":1610163047798,"results":"24","hashOfConfig":"21"},{"size":2592,"mtime":1609216593423,"results":"25","hashOfConfig":"21"},{"size":3991,"mtime":1608939312965,"results":"26","hashOfConfig":"21"},{"size":4708,"mtime":1609353030563,"results":"27","hashOfConfig":"21"},{"size":3001,"mtime":1609367639733,"results":"28","hashOfConfig":"21"},{"size":2336,"mtime":1609805913055,"results":"29","hashOfConfig":"21"},{"size":2515,"mtime":1609352894292,"results":"30","hashOfConfig":"21"},{"size":3241,"mtime":1609216593425,"results":"31","hashOfConfig":"21"},{"size":6028,"mtime":1609809976516,"results":"32","hashOfConfig":"21"},{"size":5685,"mtime":1609870525966,"results":"33","hashOfConfig":"21"},{"size":10498,"mtime":1609868092657,"results":"34","hashOfConfig":"21"},{"size":1826,"mtime":1609200259285,"results":"35","hashOfConfig":"21"},{"size":7737,"mtime":1609870441248,"results":"36","hashOfConfig":"21"},{"size":11946,"mtime":1609870381031,"results":"37","hashOfConfig":"21"},{"size":9806,"mtime":1610163294817,"results":"38","hashOfConfig":"21"},{"size":714,"mtime":1609377442698,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"whis6",{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/shaunjorstad/Desktop/tasks/src/index.js",[],["88","89"],"/Users/shaunjorstad/Desktop/tasks/src/App.js",["90","91","92"],"import './App.css';\nimport React from 'react';\nimport NavBar from './components/NavBar.js';\nimport Content from './components/Content.js';\nimport { db, inc, dec, del, auth, Timestamp } from './FirebaseConfig';\nimport { v4 as uuidv4 } from 'uuid';\nimport Config from './config.json';\nimport Onboard from './components/Onboard.js';\nimport 'tailwindcss/tailwind.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedList: \"today\",\n      lists: {},\n      tasks: {},\n      user: null\n    }\n    if (this.state.user !== null) {\n      this.pullFirestoreData()\n    }\n    this.selectNewList = this.selectNewList.bind(this)\n    this.getList = this.getList.bind(this)\n    this.createList = this.createList.bind(this)\n    this.editList = this.editList.bind(this)\n    this.deleteList = this.deleteList.bind(this)\n    this.createTask = this.createTask.bind(this)\n    this.editTask = this.editTask.bind(this)\n    this.completeTask = this.completeTask.bind(this)\n    this.createSection = this.createSection.bind(this)\n    this.editSection = this.editSection.bind(this)\n    this.deleteSection = this.deleteSection.bind(this)\n    this.batchDeleteTasks = this.batchDeleteTasks.bind(this)\n\n    this.rootHandlers = {\n      selectNewList: this.selectNewList,\n      getList: this.getList,\n      createList: this.createList,\n      editList: this.editList,\n      deleteList: this.deleteList,\n      createTask: this.createTask,\n      editTask: this.editTask,\n      completeTask: this.completeTask,\n      createSection: this.createSection,\n      editSection: this.editSection,\n      deleteSection: this.deleteSection,\n      batchDeleteTasks: this.batchDeleteTasks\n    }\n  }\n\n  componentDidMount = () => {\n    auth.onAuthStateChanged(userAuth => {\n      this.setState({ user: userAuth });\n      this.pullFirestoreData()\n    });\n  };\n\n  selectNewList(listName) {\n    this.setState({\n      selectedList: listName\n    })\n  }\n\n  createUserDocument() {\n    console.log(\"Creating user document\")\n    db.collection('users').doc(this.state.user.email).set({\n      lists: {},\n      tasks: {}\n    }).then(() => {\n      this.pullFirestoreData()\n    })\n  }\n\n  pullFirestoreData() {\n    db.collection('users').doc(this.state.user.email).get().then((doc) => {\n      if (doc.exists) {\n        // parse the lists\n        let tmpLists = {}\n        let tmpTasks = {}\n        for (let listID in doc.data().lists) {\n          tmpLists[listID] = doc.data().lists[listID]\n        }\n        // parse the tasks\n        for (let taskID in doc.data().tasks) {\n          tmpTasks[taskID] = doc.data().tasks[taskID]\n          if (tmpTasks[taskID].due !== null) {\n            tmpTasks[taskID].due = doc.data().tasks[taskID].due.toDate()\n          }\n        }\n        this.setState({\n          lists: tmpLists,\n          tasks: tmpTasks\n        })\n      } else {\n        console.log(\"No such document!\");\n        this.createUserDocument()\n      }\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    })\n  }\n\n  getList(listID) {\n    return this.state.lists[listID]\n  }\n\n  createList() {\n    let newList = {\n      color: \"blue\",\n      order: Object.values(this.state.lists).length,\n      name: \"new list\",\n      id: uuidv4(),\n      sections: {},\n      parentList: null\n    }\n    let currentLists = this.state.lists\n    currentLists[newList.id] = newList\n    this.setState({\n      lists: currentLists\n    })\n    let docUpdate = {}\n    docUpdate[`lists.${newList.id}`] = newList\n    db.collection('users').doc(this.state.user.email).update(docUpdate)\n  }\n\n  editList(id, config) {\n    let docChanges = {}\n    let updateLists = this.state.lists\n    for (let key in config) {\n      docChanges[`lists.${id}.${key}`] = config[key]\n      updateLists[id][key] = config[key]\n    }\n    this.setState({ lists: updateLists })\n    db.collection('users').doc(this.state.user.email).update(docChanges).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    })\n  }\n\n  createSection(listID) {\n    let updatedLists = this.state.lists\n    let newSection = {\n      name: '',\n      id: uuidv4(),\n      order: Object.values(updatedLists[listID].sections).length + 1\n    }\n    updatedLists[listID].sections[newSection.id] = newSection\n    this.setState({\n      lists: updatedLists\n    })\n\n    let pushSection = {}\n    pushSection[`lists.${listID}.sections.${newSection.id}`] = newSection\n    db.collection('users').doc(this.state.user.email).update(pushSection)\n  }\n\n  editSection(listID, sectionID, changes) {\n    let updateLists = this.state.lists\n    let pushChanges = {}\n    for (let key in changes) {\n      updateLists[listID].sections[sectionID][key] = changes[key]\n      pushChanges[`lists.${listID}.sections.${sectionID}.${key}`] = changes[key]\n    }\n    this.setState({ lists: updateLists })\n    db.collection('users').doc(this.state.user.email).update(pushChanges)\n  }\n\n  deleteSection(listID, sectionID) {\n    let updateLists = this.state.lists\n    let updateTasks = this.state.tasks\n    let pushChanges = {}\n\n    delete updateLists[listID].sections[sectionID]\n    pushChanges[`lists.${listID}.sections.${sectionID}`] = del\n\n    Object.values(updateTasks).filter(task => task.sectionID === sectionID).forEach(task => {\n      delete updateTasks[task.id]\n      pushChanges[`tasks.${task.id}`] = del\n    })\n\n    this.setState({ lists: updateLists, tasks: updateTasks })\n    db.collection('users').doc(this.state.user.email).update(pushChanges)\n  }\n\n  batchDeleteTasks(taskIDs) {\n    let updateTasks = this.state.tasks\n    let pushChanges = {}\n    taskIDs.forEach(taskID => {\n      delete updateTasks[taskID]\n      pushChanges[`tasks.${taskID}`] = del\n    })\n    this.setState({ tasks: updateTasks })\n    db.collection('users').doc(this.state.user.email).update(pushChanges)\n  }\n\n  deleteList(id) {\n    let updateLists = this.state.lists\n    delete updateLists[id]\n    let deleteList = {}\n    deleteList[`lists.${id}`] = del\n    let removeTasks = this.state.tasks\n    Object.values(removeTasks).filter(task => task.listID === id).forEach(task => {\n      delete removeTasks[task.id]\n      deleteList[`tasks.${task.id}`] = del\n    })\n    this.setState({ lists: updateLists, tasks: removeTasks, selectedList: \"today\" })\n    console.log(this.state.lists)\n    db.collection('users').doc(this.state.user.email).update(deleteList)\n  }\n\n  createTask(listID, sectionID = null, due = null) {\n    let newTask = {\n      content: '',\n      due: due,\n      id: uuidv4(),\n      notes: '',\n      order: Object.values(this.state.tasks).filter(task => task.listID === listID && task.sectionID === sectionID).length + 1,\n      listID: listID,\n      sectionID: sectionID,\n      parentTask: null\n    }\n    let updateTasks = this.state.tasks\n    updateTasks[newTask.id] = newTask\n    this.setState({\n      tasks: updateTasks\n    })\n    let pushTask = {}\n    pushTask[`tasks.${newTask.id}`] = newTask\n    if (due !== null) {\n      pushTask[`tasks.${newTask.id}.due`] = Timestamp.fromDate(due)\n    }\n    db.collection('users').doc(this.state.user.email).update(pushTask)\n    return(newTask.id)\n  }\n\n  editTask(taskID, config, final = false) {\n    let updateTasks = this.state.tasks\n    for (let key in config) {\n      updateTasks[taskID][key] = config[key]\n    }\n    this.setState({ tasks: updateTasks })\n    if (final) {\n      let pushChanges = {}\n      let task = this.state.tasks[taskID]\n      for (let key in task) {\n        pushChanges[`tasks.${taskID}.${key}`] = task[key]\n      }\n      if (task.due !== null) {\n        pushChanges[`tasks.${taskID}.due`] = Timestamp.fromDate(task.due)\n      }\n\n      db.collection('users').doc(this.state.user.email).update(pushChanges)\n    }\n  }\n\n  completeTask(taskID) {\n    let updateTasks = this.state.tasks\n    delete updateTasks[taskID]\n    let pushChanges = {}\n\n    Object.values(updateTasks).filter(task => task.parentTask === taskID).forEach(childTask => {\n      delete updateTasks[childTask.id]\n      pushChanges[`tasks.${childTask.id}`] = del\n    })\n    this.setState({ tasks: updateTasks })\n    pushChanges[`tasks.${taskID}`] = del\n    db.collection('users').doc(this.state.user.email).update(pushChanges)\n  }\n\n  render() {\n    if (this.state.user === null) {\n      return (\n        <Onboard />\n      )\n    }\n    return (\n      <div className=\"flex w-full h-screen\">\n        <NavBar\n          lists={this.state.lists}\n          tasks={this.state.tasks}\n          selectedList={this.state.selectedList}\n          rootHandlers={this.rootHandlers}\n        />\n        <Content\n          lists={this.state.lists}\n          tasks={this.state.tasks}\n          selectedList={this.state.selectedList}\n          rootHandlers={this.rootHandlers}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/shaunjorstad/Desktop/tasks/src/reportWebVitals.js",[],"/Users/shaunjorstad/Desktop/tasks/src/FirebaseConfig.js",["93","94"],"/Users/shaunjorstad/Desktop/tasks/src/DataStructures.js",[],["95","96"],"/Users/shaunjorstad/Desktop/tasks/src/Queries.js",["97","98","99","100"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { List, Task } from './DataStructures.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nlet allLists = null;\nlet today = 0;\nlet upcoming = 0;\nlet all = 0;\n\n// Lists Management\nexport function getLists() {\n    if (allLists != null) {\n        return new Promise((resolve, reject) => {\n            resolve(\n                allLists\n            );\n        });\n    }\n    return new Promise((resolve, reject) => {\n        // console.log(\"querying firebase\");\n        db.collection('lists').get().then((lists) => {\n            let tmplists = {};\n            lists.forEach((list) => {\n                tmplists[list.data().config.id] = new List(list.data());\n            });\n            tmplists.today = new List({ config: { name: 'today', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.upcoming = new List({ config: { name: 'upcoming', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n            tmplists.all = new List({ config: { name: 'all', color: 'blue', order: -1, id: 0 }, taskCount: 0, sections: { default: { order: 0, tasks: {} } } })\n\n            allLists = tmplists;\n            resolve(allLists);\n        }).catch(function (error) {\n            reject(\"error getting document\");\n        });\n    });\n}\n\nexport function getCounts() {\n    if (allLists != null) {\n        allLists.forEach((list) => {\n\n        });\n    }\n    return getLists().then((result) => {\n        getCounts();\n    });\n}\n\nexport function removeList(listId) {\n    db.collection('lists').doc(listId).delete()\n}\n\n/**\n * adds a new list to firestore\n * @param {*} config  {name, order, color}\n */\nexport function fcreateList(config) {\n    // create list locally \n    let listConfig = config\n    listConfig['id'] = uuidv4()\n    let newList = new List({\n        config: listConfig,\n        taskCount: 0,\n        sections: {\n            default: {\n                order: 0,\n                tasks: {}\n            },\n            second: {\n                order: 1,\n                tasks: {}\n            }\n        }\n    })\n    // create list remotely\n    // console.log(JSON.stringify(newList.toObject()))\n    console.log('pushing to firebase')\n    console.log(JSON.stringify(newList))\n    console.log(newList.toObject())\n    db.collection(\"lists\").doc(listConfig.id).set(newList.toObject())\n    return newList;\n}\n\nexport function updateListConfig(listName, config) {\n\n}\n\nexport function changeListName(newName, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.name\": newName\n    })\n}\n\nexport function changeListColor(newColor, listId) {\n    db.collection(\"lists\").doc(listId).update({\n        \"config.color\": newColor\n    })\n}\n\n\n// Task Management\nexport function fireCreateTask(listID, sectionName, task) {\n    let newTask = {}\n    newTask[`sections.${sectionName}.tasks.${task.id}`] = task.toObject()\n    newTask[`taskCount`] = inc\n    db.collection('lists').doc(listID).update(newTask).then()\n}\n\nexport function fcompleteTask(listId, sectionName, taskId) {\n    let completeTask = {}\n    completeTask[`sections.${sectionName}.tasks.${taskId}`] = del\n    completeTask[`taskCount`] = dec\n    db.collection('lists').doc(listId).update(completeTask)\n}\n\nexport function updateTask(listId, sectionName, taskId, taskData) {\n    let taskUpdate = {}\n    for (let key in taskData) {\n        taskUpdate[`sections.${sectionName}.tasks.${taskId}.${key}`] = taskData[key]\n    }\n    console.log('attempting to push to firebase:')\n    console.log(taskUpdate)\n    db.collection('lists').doc(listId).update(taskUpdate)\n        .catch(function (error) {\n            console.error(\"Error updating document: \", error);\n        });\n}\n\nexport function testConnection() {\n    fcreateList({\n        name: 'yet another list!',\n        order: 0,\n        color: 'blue'\n    });\n}\n\n// export function createNewList() {\n//     createList({\n\n//     })\n// }","/Users/shaunjorstad/Desktop/tasks/src/Config.js",["101","102"],"import React from 'react';\n\nclass Config extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameInput: this.props.lists[this.props.selectedList].name,\n            validName: true,\n            colorInput: this.getList().color,\n            validColor: true\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedList != prevProps.selectedList && !['today', 'all', 'upcoming'].includes(this.props.selectedList)) {\n            this.setState({\n                nameInput: this.getList().name,\n                validName: true,\n                colorInput: this.getList().color,\n                validColor: true\n            })\n        }\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    processNameChange(val) {\n        this.setState({\n            nameInput: val\n        })\n        if (val.length == 0 || ['today', 'upcoming', 'all'].includes(val)) {\n            this.setState({\n                validName: false\n            })\n        } else {\n            this.setState({\n                validName: true\n            })\n            this.props.rootHandlers.editList(this.getList().id, {name: val})\n        }\n    }\n\n    processColorChange(val) {\n        this.setState({\n            colorInput: val\n        })\n        if (!['green', 'blue', 'teal', 'pink', 'purple', 'orange'].includes(val)) {\n            this.setState({\n                validColor: false\n            })\n        } else {\n            this.setState({\n                validColor: true\n            })\n            this.props.rootHandlers.editList(this.getList().id, {color: val})\n        }\n    }\n\n    renderColorOptions() {\n        return (\n            <div className=\"col-span-3 grid grid-cols-6 \">\n                <div className=\"h-10 w-10 rounded-lg bg-pink transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('pink') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-blue transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('blue') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-purple transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('purple') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-orange transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('orange') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-teal transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('teal') }}></div>\n                <div className=\"h-10 w-10 rounded-lg bg-green transition-all duration-300 ease-in-out transform hover:scale-125\"\n                    onClick={() => { this.processColorChange('green') }}></div>\n            </div>\n        )\n    }\n\n\n    renderTitleInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg ${this.state.validName ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.nameInput}\n                onChange={val => { this.processNameChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderColorInput() {\n        return (\n            <input\n                className={`col-span-3 bg-lightGray px-2 py-2 rounded-lg text-${this.getList().color} ${this.state.validColor ? '' : 'bg-lightRed text-red'}`}\n                value={this.state.colorInput}\n                onChange={val => { this.processColorChange(val.target.value) }}\n                type='text' />)\n    }\n\n    renderDeleteButton() {\n        return (\n            <div className=\"select-none cursor-pointer bg-lightRed text-red col-span-3 px-4 py-4 rounded-lg mt-48 flex justify-center\" onClick={() => { this.props.rootHandlers.deleteList(this.getList().id) }}>\n                <p className=\"\">delete</p>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"mt-20 w-3/5 grid grid-cols-4 gap-y-7\">\n                <div className=\"configLabel\">\n                    <p>Title</p>\n                </div>\n                {this.renderTitleInput()}\n                <div className=\"configLabel\">\n                    <p>Color</p>\n                </div>\n                {/* {this.renderColorInput()} */}\n                {this.renderColorOptions()}\n                <div></div>\n                {this.renderDeleteButton()}\n            </div>\n        );\n    }\n}\n\nexport default Config;","/Users/shaunjorstad/Desktop/tasks/src/components/NavBar.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/Content.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/Tile.js",["103"],"import React from 'react';\nimport 'tailwindcss/tailwind.css';\nimport todayLogo from '../icons/today.svg';\nimport allLogo from '../icons/all.svg';\nimport upcomingLogo from '../icons/upcoming.svg';\nimport flaggedLogo from '../icons/flagged.svg';\nimport '../index.css';\n\nclass Tile extends React.Component {\n    renderIcon() {\n        switch (this.props.icon) {\n            case \"today\":\n                return (\n                    <img src={todayLogo} width=\"24\" height=\"24\" alt=\"today\" />\n                );\n            case \"all\":\n                return (\n                    <img src={allLogo} width=\"24\" height=\"24\" alt=\"all\" />\n                );\n            case \"upcoming\":\n                return (\n                    <img src={upcomingLogo} width=\"24\" height=\"24\" alt=\"upcoming\" />\n                );\n            default:\n                return;\n        }\n    }\n\n    renderTaskCount() {\n        return (\n            <div className={` ${(this.props.selectedList === this.props.title ? 'selectedTaskCount text-tileSelectedTitle' : 'unselectedTaskCount text-gray')}`}>\n                <p>{this.props.taskCount}</p>\n            </div>\n        )\n    }\n\n    renderTitle() {\n        return (\n            <div className={`${(this.props.selectedList === this.props.title ? 'selectedTitle text-tileSelectedTitle' : 'unselectedTitle text-tileUnselectedTitle')}`}>\n                <p>{this.props.title}</p>\n            </div>\n        )\n    }\n\n    renderBackgroundColor() {\n        if (this.props.selectedList === this.props.title) {\n            switch (this.props.title) {\n                case \"today\":\n                    return \"bg-blue\";\n                case \"all\":\n                    return \"bg-gray\";\n                case \"upcoming\":\n                    return \"bg-red\";\n                default: return;\n            }\n        } else {\n            return 'bg-tileUnselected';\n        }\n    }\n\n    render() {\n        return (\n            <div\n                id={this.props.title + \"Tile\"}\n                className={`${this.renderBackgroundColor() + ' wh-tile rounded-lg'}`}\n                onClick={() => {\n\n                    this.props.rootHandlers.selectNewList(this.props.title)\n                }}>\n                <div className=\"place-self-center grid grid-cols-2 py-2 px-2 justify-between gap-1\">\n                    {this.renderIcon()}\n                    {this.renderTaskCount()}\n                    {this.renderTitle()}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Tile","/Users/shaunjorstad/Desktop/tasks/src/components/ListTile.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/ContentHeader.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/Task.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/DatePicker.js",["104","105"],"import React from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nclass DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bottomAlign: false\n        }\n        this.TODAY = new Date()\n        this.DAY_OF_WEEK = {\n            0: \"sunday\",\n            1: \"monday\",\n            2: \"tuesday\",\n            3: \"wednesday\",\n            4: \"thursday\",\n            5: \"friday\",\n            6: \"saturday\"\n        }\n        this.MONTHS = {\n            0: \"January\",\n            1: \"February\",\n            2: \"March\",\n            3: \"April\",\n            4: \"May\",\n            5: \"June\",\n            6: \"July\",\n            7: \"August\",\n            8: \"September\",\n            9: \"October\",\n            10: \"November\",\n            11: \"December\"\n        }\n        this.UpcomingMonths = {}\n        let year = this.TODAY.getFullYear()\n        let month = this.TODAY.getUTCMonth()\n        this.UpcomingMonths[0] = [this.TODAY, (new Date(year, month + 1, 0).getDate())]\n        for (let i = 0; i < 11; i++) {\n            month += 1;\n            if (month >= 12) {\n                month = 0\n                year += 1\n            }\n            let newDate = new Date(year, month)\n            let daysInMonth = (new Date(year, month + 1, 0).getDate())\n            this.UpcomingMonths[i + 1] = [newDate, daysInMonth]\n        }\n    }\n\n    generateDateFromOffset(start, offset) {\n        let date = new Date(start)\n        date.setDate(start.getDate() + offset)\n        return date\n    }\n\n    generateDateFromToday(dayOffset) {\n        let date = new Date(this.TODAY)\n        date.setDate(this.TODAY.getDate() + dayOffset)\n        return date\n    }\n\n    calcDayDifference(day) {\n        return Math.ceil((day.getTime() - this.TODAY.getTime()) / (1000 * 3600 * 24))\n    }\n\n    renderDate() {\n        let dateString = \"add date\"\n        if (this.props.task.due) {\n            let parsedDate = this.props.task.due.toLocaleDateString(\"en-US\").split(\"/\")\n            dateString = parsedDate[0] + \"/\" + parsedDate[1]\n            let offset = this.calcDayDifference(this.props.task.due)\n            if (offset >= 0) {\n                if (offset === 0) {\n                    dateString = \"today\"\n                } else if (offset === 1) {\n                    dateString = \"tomorrow\"\n                } else if (offset < 7) {\n                    dateString = this.DAY_OF_WEEK[this.props.task.due.getDay()]\n                } else if (offset < 14) {\n                    dateString = \"next \" + this.DAY_OF_WEEK[this.props.task.due.getDay()]\n                }\n            } else {\n                dateString = offset + \" days overdue\"\n            }\n        }\n        return (\n            <div className={\n                `select-none\n                text-${this.renderDateColor()}`\n            }>\n                <span\n                    className={`text-sfRegular text-14 rounded-md \n                    transition-all duration-200 ease-in-out \n                    dateButtonHover cursor-pointer\n                    `}\n                    onClick={(e) => {\n                        if (e.clientY > 350) {\n                            this.setState({ bottomAlign: true })\n                        } else {\n                            this.setState({ bottomAlign: false })\n                        }\n                        let change = (this.props.activeDate === null ? this.props.task.id : null)\n                        this.props.listHandlers.expandDate(change)\n                    }}\n                >\n                    {dateString}\n                </span>\n            </div>\n        )\n\n    }\n\n    renderDateColor() {\n        if (this.props.task.due) {\n            let parsedDate = this.props.task.due.toLocaleDateString(\"en-US\").split(\"/\")\n            let offset = this.calcDayDifference(this.props.task.due)\n            if (offset >= 0) {\n                if (offset === 0) {\n                    return 'dateToday'\n                } else if (offset === 1) {\n                    return 'dateTomorrow'\n                } else {\n                    return 'dateFuture'\n                }\n            } else {\n                return 'dateExpired'\n            }\n        } else {\n            return ('noDate')\n        }\n    }\n\n    renderPicker() {\n        let calMonths = [...Array(12).keys()].map(i =>\n            <div className=\"\">\n                {i === 0 ?\n                    <div className=\"w-full bg-white grid grid-cols-7 absolute top-36 z-50 text-sfLight text-13\">\n                        <div className=\"w-full text-center\">S</div>\n                        <div className=\"w-full text-center\">M</div>\n                        <div className=\"w-full text-center\">T</div>\n                        <div className=\"w-full text-center\">W</div>\n                        <div className=\"w-full text-center\">T</div>\n                        <div className=\"w-full text-center\">F</div>\n                        <div className=\"w-full text-center\">S</div>\n                        <hr className={`col-span-7 opacity-10`} />\n                    </div> : null}\n                <div className={`sticky bg-white top-0 text-15 font-bold pl-4 pb-1 text-sfRegular text-${this.props.listColor}`}>\n                    {this.MONTHS[this.UpcomingMonths[i][0].getMonth()] + ' ' + this.UpcomingMonths[i][0].getFullYear()}\n                </div>\n                <div className={`py-6 grid grid-cols-7 gap-y-1`}>\n                    <div className={`col-span-${this.UpcomingMonths[i][0].getDay()}`}></div>\n                    {[...Array(this.UpcomingMonths[i][1] - (this.UpcomingMonths[i][0].getDate() - 1)).keys()].map(date =>\n                        <div className={`\n                        text-center text-sfLight text-13 select-none cursor-pointer py-1 rounded-md\n                        hover:bg-lightGray\n                        ${i === 0 && date === 0 ? `text-${this.props.listColor}` : null}`}\n                            onClick={() => {\n                                let newDate = this.generateDateFromOffset(this.UpcomingMonths[i][0], date)\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: newDate }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}>\n                            {date + this.UpcomingMonths[i][0].getDate()}\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n        return (\n            <div className={\n                `absolute wh-datepicker rounded-xl z-50 ${this.state.bottomAlign ? `bottom-0` : null}`\n            }>\n                <div className={`grid grid-cols-2 pt-3 px-4`}>\n                    <div className={`flex flex-col`}>\n                        <div className={\n                            `text-dateQuickSelect select-none cursor-pointer \n                            hover:bg-lightGray transition-all duration-100 ease-in-out\n                            py-1 px-2 rounded-md`\n                        }\n                            onClick={() => {\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: this.TODAY }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}\n                        >\n                            today\n                        </div>\n                        <div className={\n                            `text-dateQuickSelect select-none cursor-pointer \n                            hover:bg-lightGray transition-all duration-100 ease-in-out\n                            py-1 px-2 rounded-md`\n                        }\n                            onClick={() => {\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: this.generateDateFromToday(2) }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}>\n                            later this week\n                        </div>\n                        <div className={\n                            `text-dateQuickSelect select-none cursor-pointer \n                            hover:bg-lightGray transition-all duration-100 ease-in-out\n                            py-1 px-2 rounded-md`\n                        }\n                            onClick={() => {\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: null }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}>\n                            none\n                        </div>\n                    </div>\n                    <div className={`flex flex-col align-end`}>\n                        <div className={\n                            `text-dateQuickSelect select-none cursor-pointer \n                            hover:bg-lightGray transition-all duration-100 ease-in-out\n                            py-1 px-2 rounded-md`\n                        }\n                            onClick={() => {\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: this.generateDateFromToday(1) }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}>\n                            tomorrow\n                        </div>\n                        <div className={\n                            `text-dateQuickSelect select-none cursor-pointer \n                            hover:bg-lightGray transition-all duration-100 ease-in-out\n                            py-1 px-2 rounded-md`\n                        }\n                            onClick={() => {\n                                this.props.rootHandlers.editTask(this.props.task.id, { due: this.generateDateFromToday(7) }, true)\n                                this.props.listHandlers.expandDate(null)\n                            }}>\n                            next week\n                        </div>\n                    </div>\n                </div>\n                <div id=\"calendar\" className={`overflow-auto hide-scrollbar h-4/6 mt-4`}>\n                    {calMonths}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className={\n                `m-date`\n            }>\n                {this.renderDate()}\n                {this.props.activeDate === this.props.task.id ? this.renderPicker() : null}\n            </div>\n        );\n    }\n}\n\n\nexport default DatePicker","/Users/shaunjorstad/Desktop/tasks/src/data.js",["106","107"],"import { db, inc, dec, del } from './FirebaseConfig';\nimport { v4 as uuidv4 } from 'uuid';\nimport Config from './config.json';\n\n\nclass data {\n    lists\n    tasks\n    constructor() {\n        this.lists = {}\n        this.tasks = {}\n\n        console.log(Config.email);\n        // todo: fetch all firebase data\n        \n    }\n\n    getList(listID) {\n        return this.lists[listID]\n    }\n\n    getLists() {\n        return this.lists        \n    }\n\n    // lists\n    createList() {\n        let newList = {\n            color: \"blue\",\n            order: Object.values(this.lists).length,\n            name: \"new list\",\n            id: uuidv4(),\n            sections: {}\n        }\n        this.lists[newList.id] = newList\n        let docUpdate = {}\n        docUpdate[`lists.${newList.id}`] = newList\n        db.collection('users').doc(Config.email).update(docUpdate)\n    }\n\n    editList(id, config) {\n        let docChanges = {}\n        for (let key in config) {\n            docChanges[`lists.${id}.${key}`] = config[key]\n            this.lists.id[key] = config[key]\n        }\n        db.collection('users').doc(Config.email).update(docChanges)\n    }\n\n    deleteList(id) {\n        delete this.lists.id \n        let deleteList = {} \n        deleteList[`lists.${id}`] = del\n        db.collection('users').doc(Config.email).update(deleteList)\n    }\n\n    // sections\n    createSection(listID) {\n\n    }\n\n    editSection(listID, sectionID, changes) {\n\n    }\n\n    deleteSection(listID, sectionID) {\n\n    }\n\n    // tasks\n    // createTask(listID, sectionID) {\n\n    // }\n\n    // editTask(listID, sectionID, taskID, changes) {\n\n    // }\n\n    // completeTask(listID, sectionID, taskID) {\n\n    // }\n\n    // getAllTasks() {\n\n    // }\n\n    // getTodayTasks() {\n\n    // }\n\n    // getUpcomingTasks() {\n\n    // }\n}\n\nexport var dataInstance = new data();",["108","109"],"/Users/shaunjorstad/Desktop/tasks/src/components/TaskSection.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/List.js",["110","111","112","113"],"import React from 'react';\nimport Task from './Task.js';\nimport TaskSection from './TaskSection.js';\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: this.getList(),\n            activeTask: null,\n            activeDate: null\n        }\n        this.selectNewTask = this.selectNewTask.bind(this);\n        this.keyPress = this.keyPress.bind(this);\n        this.expandDate = this.expandDate.bind(this);\n        this.listHandlers = {\n            selectNewTask: this.selectNewTask,\n            expandDate: this.expandDate\n        }\n        this.DAY_OF_WEEK = {\n            0: \"sunday\",\n            1: \"monday\",\n            2: \"tuesday\",\n            3: \"wednesday\",\n            4: \"thursday\",\n            5: \"friday\",\n            6: \"saturday\"\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedList !== this.props.selectedList) {\n            this.setState({ list: this.getList() });\n        }\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.keyPress, false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.keyPress, false);\n    }\n\n    keyPress(event) {\n        switch (event.keyCode) {\n            case 27:\n                this.selectNewTask(null)\n                break\n            case 13:\n                if (this.state.activeTask !== null) {\n                    let oldSection = this.props.tasks[this.state.activeTask].sectionID\n                    let newID = this.props.rootHandlers.createTask(this.getList().id, oldSection)\n                    this.selectNewTask(newID)\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    selectNewTask(id) {\n        this.setState({ activeTask: id, activeDate: null })\n    }\n\n    expandDate(id) {\n        this.setState({ activeDate: id })\n    }\n\n    getList() {\n        return this.props.lists[this.props.selectedList]\n    }\n\n    getSectionTasks(sectionID, dueOffset = null) {\n        if (dueOffset === null) {\n            return Object.values(this.props.tasks).filter(task => task.sectionID === sectionID ).sort((a, b) => { return a.order - b.order })\n        } else {\n            return Object.values(this.props.tasks).filter(task => task.sectionID === sectionID && task.due !== null && this.calcDayDifference(task.due) === 0 ).sort((a, b) => { return a.order - b.order })\n        }\n    }\n\n    getListTasks(listID, dueOffset = null) {\n        if (dueOffset === null) {\n            return Object.values(this.props.tasks).filter(task => task.listID === listID).sort((a, b) => { return a.order - b.order })\n        } else {\n            return Object.values(this.props.tasks).filter(task => task.listID === listID && task.due !== null && this.calcDayDifference(task.due) <= dueOffset).sort((a, b) => { return a.order - b.order })\n        }\n    }\n\n    getDateTasks(dueOffset) {\n        return Object.values(this.props.tasks).filter(task => task.listID === this.getList().id && task.due !== null && this.calcDayDifference(task.due) === dueOffset).sort((a, b) => { return a.order - b.order })\n    }\n\n    getUpcomingName(dueOffset) {\n        let today = new Date().getDay()\n        today += dueOffset\n        today %= 7\n        return this.DAY_OF_WEEK[today]\n    }\n\n    renderAddSectionButton() {\n        return (\n            <div className=\"grid grid-cols-12\">\n                <div></div>\n                <div className=\"col-span-11 w-full items-center cursor-pointer\">\n                    <p\n                        className=\"select-none place-self-center text-center pl-2 pt-4 newListButton text-gray\"\n                        onClick={() => { this.props.rootHandlers.createSection(this.getList().id) }}\n                    >+ Add Section</p>\n                </div>\n\n            </div>\n        )\n    }\n\n    renderAll() {\n        let defaultTasks = Object.values(this.props.tasks).filter(task => task.listID === this.getList().id && task.sectionID === null ).sort((a, b) => { return a.order - b.order })\n\n        let sections = Object.values(this.getList().sections).sort((a, b) => { return a.order - b.order }).map(section =>\n            <TaskSection\n                key={section.id}\n                filter={this.props.filter}\n                tasks={this.getSectionTasks(section.id)}\n                sectionID={section.id}\n                sectionName={section.name}\n                lists={this.props.lists}\n                selectedList={this.props.selectedList}\n                rootHandlers={this.props.rootHandlers}\n                listHandlers={this.listHandlers}\n                activeTask={this.state.activeTask}\n                activeDate={this.state.activeDate}\n            />\n        )\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                <TaskSection\n                    tasks={defaultTasks}\n                    filter={this.props.filter}\n                    sectionID={null}\n                    sectionName={null}\n                    lists={this.props.lists}\n                    selectedList={this.props.selectedList}\n                    rootHandlers={this.props.rootHandlers}\n                    listHandlers={this.listHandlers}\n                    activeTask={this.state.activeTask}\n                    activeDate={this.state.activeDate}\n                />\n                {sections}\n                {this.renderAddSectionButton()}\n            </div>\n        );\n    }\n\n    calcDayDifference(day) {\n        return Math.ceil((day.getTime() - (new Date()).getTime()) / (1000 * 3600 * 24))\n    }\n\n    renderToday() {\n        let defaultTasks = Object.values(this.props.tasks).filter(task => task.listID === this.getList().id && task.sectionID === null && task.due !== null && this.calcDayDifference(task.due) === 0).sort((a, b) => { return a.order - b.order })\n\n\n        let sections = Object.values(this.getList().sections).sort((a, b) => { return a.order - b.order }).map(section =>\n            <TaskSection\n                key={section.id}\n                filter={this.props.filter}\n                tasks={this.getSectionTasks(section.id, 0)}\n                sectionID={section.id}\n                sectionName={section.name}\n                lists={this.props.lists}\n                selectedList={this.props.selectedList}\n                rootHandlers={this.props.rootHandlers}\n                listHandlers={this.listHandlers}\n                activeTask={this.state.activeTask}\n                activeDate={this.state.activeDate}\n            />\n        )\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                <TaskSection\n                    tasks={defaultTasks}\n                    filter={this.props.filter}\n                    sectionID={null}\n                    sectionName={null}\n                    lists={this.props.lists}\n                    selectedList={this.props.selectedList}\n                    rootHandlers={this.props.rootHandlers}\n                    listHandlers={this.listHandlers}\n                    activeTask={this.state.activeTask}\n                    activeDate={this.state.activeDate}\n                />\n                {sections}\n                {this.renderAddSectionButton()}\n            </div>\n        );\n    }\n\n    renderUpcoming() {\n        let days = [...Array(7).keys()].map(index =>\n            <TaskSection\n                key={index}\n                filter={this.props.filter}\n                tasks={this.getDateTasks(index)}\n                sectionID={null}\n                sectionName={this.getUpcomingName(index)}\n                offset={index}\n                lists={this.props.lists}\n                selectedList={this.props.selectedList}\n                rootHandlers={this.props.rootHandlers}\n                listHandlers={this.listHandlers}\n                activeTask={this.state.activeTask}\n                activeDate={this.state.activeDate}\n            />\n        )\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                {days}\n            </div>\n        );\n    }\n\n    renderGlobalAll() {\n        let lists = Object.values(this.props.lists).sort((a, b) => { return a.order - b.order }).map(list => {\n            let tasks = this.getListTasks(list.id)\n            if (tasks.length > 0) {\n                return <TaskSection\n                    key={list.id}\n                    filter={this.props.filter}\n                    tasks={tasks}\n                    sectionID={list.id}\n                    listID={list.id}\n                    sectionName={list.name}\n                    lists={this.props.lists}\n                    selectedList={this.props.selectedList}\n                    rootHandlers={this.props.rootHandlers}\n                    listHandlers={this.listHandlers}\n                    activeTask={this.state.activeTask}\n                    activeDate={this.state.activeDate}\n                />\n            }\n        })\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                {lists}\n            </div>\n        );\n    }\n    renderGlobalUpcoming() {\n        let lists = Object.values(this.props.lists).sort((a, b) => { return a.order - b.order }).map(list => {\n            let tasks = this.getListTasks(list.id, 7)\n            if (tasks.length > 0) {\n                return <TaskSection\n                    key={list.id}\n                    filter={this.props.filter}\n                    tasks={tasks}\n                    sectionID={list.id}\n                    listID={list.id}\n                    sectionName={list.name}\n                    lists={this.props.lists}\n                    selectedList={this.props.selectedList}\n                    rootHandlers={this.props.rootHandlers}\n                    listHandlers={this.listHandlers}\n                    activeTask={this.state.activeTask}\n                    activeDate={this.state.activeDate}\n                />\n            }\n        })\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                {lists}\n            </div>\n        );\n    }\n    renderGlobalToday() {\n        let lists = Object.values(this.props.lists).sort((a, b) => { return a.order - b.order }).map(list => {\n            let tasks = this.getListTasks(list.id, 0)\n            if (tasks.length > 0) {\n                return <TaskSection\n                    key={list.id}\n                    filter={this.props.filter}\n                    tasks={tasks}\n                    sectionID={list.id}\n                    listID={list.id}\n                    sectionName={list.name}\n                    lists={this.props.lists}\n                    selectedList={this.props.selectedList}\n                    rootHandlers={this.props.rootHandlers}\n                    listHandlers={this.listHandlers}\n                    activeTask={this.state.activeTask}\n                    activeDate={this.state.activeDate}\n                />\n            }\n        })\n\n        return (\n            <div className=\"w-full h-full overflow-auto hide-scrollbar\">\n                {lists}\n            </div>\n        );\n    }\n\n    render() {\n        switch (this.props.selectedList) {\n            case (\"all\"):\n                return (this.renderGlobalAll())\n            case (\"upcoming\"):\n                return (this.renderGlobalUpcoming())\n            case (\"today\"):\n                return (this.renderGlobalToday())\n            default:\n                switch (this.props.filter) {\n                    case (\"all\"):\n                        return (this.renderAll())\n                    case (\"today\"):\n                        return (this.renderToday())\n                    case (\"upcoming\"):\n                        return (this.renderUpcoming())\n                    default:\n                        break\n                }\n        }\n    }\n}\n\nexport default List;","/Users/shaunjorstad/Desktop/tasks/src/components/Onboard.js",[],"/Users/shaunjorstad/Desktop/tasks/src/components/InputField.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":5,"column":14,"nodeType":"120","messageId":"121","endLine":5,"endColumn":17},{"ruleId":"118","severity":1,"message":"122","line":5,"column":19,"nodeType":"120","messageId":"121","endLine":5,"endColumn":22},{"ruleId":"118","severity":1,"message":"123","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":14},{"ruleId":"118","severity":1,"message":"124","line":34,"column":17,"nodeType":"120","messageId":"121","endLine":34,"endColumn":26},{"ruleId":"118","severity":1,"message":"124","line":48,"column":17,"nodeType":"120","messageId":"121","endLine":48,"endColumn":26},{"ruleId":"114","replacedBy":"125"},{"ruleId":"116","replacedBy":"126"},{"ruleId":"118","severity":1,"message":"127","line":2,"column":16,"nodeType":"120","messageId":"121","endLine":2,"endColumn":20},{"ruleId":"118","severity":1,"message":"128","line":6,"column":5,"nodeType":"120","messageId":"121","endLine":6,"endColumn":10},{"ruleId":"118","severity":1,"message":"129","line":7,"column":5,"nodeType":"120","messageId":"121","endLine":7,"endColumn":13},{"ruleId":"118","severity":1,"message":"130","line":8,"column":5,"nodeType":"120","messageId":"121","endLine":8,"endColumn":8},{"ruleId":"131","severity":1,"message":"132","line":15,"column":37,"nodeType":"133","messageId":"134","endLine":15,"endColumn":39},{"ruleId":"131","severity":1,"message":"135","line":33,"column":24,"nodeType":"133","messageId":"134","endLine":33,"endColumn":26},{"ruleId":"118","severity":1,"message":"136","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":19},{"ruleId":"118","severity":1,"message":"137","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":21},{"ruleId":"118","severity":1,"message":"138","line":115,"column":17,"nodeType":"120","messageId":"121","endLine":115,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":1,"column":14,"nodeType":"120","messageId":"121","endLine":1,"endColumn":17},{"ruleId":"118","severity":1,"message":"122","line":1,"column":19,"nodeType":"120","messageId":"121","endLine":1,"endColumn":22},{"ruleId":"114","replacedBy":"139"},{"ruleId":"116","replacedBy":"140"},{"ruleId":"118","severity":1,"message":"127","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":12},{"ruleId":"141","severity":1,"message":"142","line":224,"column":107,"nodeType":"143","messageId":"144","endLine":224,"endColumn":109},{"ruleId":"141","severity":1,"message":"142","line":251,"column":107,"nodeType":"143","messageId":"144","endLine":251,"endColumn":109},{"ruleId":"141","severity":1,"message":"142","line":278,"column":107,"nodeType":"143","messageId":"144","endLine":278,"endColumn":109},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'inc' is defined but never used.","Identifier","unusedVar","'dec' is defined but never used.","'Config' is defined but never used.","'errorCode' is assigned a value but never used.",["145"],["146"],"'Task' is defined but never used.","'today' is assigned a value but never used.","'upcoming' is assigned a value but never used.","'all' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'flaggedLogo' is defined but never used.","'AnimateHeight' is defined but never used.","'parsedDate' is assigned a value but never used.",["145"],["146"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]